{
    "nodes": [
        {
            "datums": [
                {
                    "expr": "0.0",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "zmin",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "105",
                    "name": "zmax",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "28/2",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1-r+qXqYf14a-f0Z-Zf105',float('-14.000000'),float('-14.000000'),float('0.000000'),float('14.000000'),float('14.000000'),float('105.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                -28,
                -642
            ],
            "name": "tube",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Cylinder (Z)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('zmin', float)",
                "input('zmax', float)",
                "input('r', float)",
                "",
                "output('shape', fab.shapes.cylinder(x, y, zmin, zmax, r))",
                "",
                "# UI",
                "sb.ui.wireframe([(x, y, zmin), (x, y, zmax)])",
                "sb.ui.wireframe([(x, y, zmin), (x+r, y, zmin)])",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmin)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmax)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.point(x, y, zmin)",
                "sb.ui.point(x, y, zmax)",
                "sb.ui.point(x + r, y, zmin, drag=(r, None, None))",
                ""
            ],
            "uid": 0
        },
        {
            "datums": [
                {
                    "expr": "0",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "(tube.zmin+tube.zmax)/2",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "15.7",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "25.4",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "tube.zmax+30",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "0.4",
                    "name": "r",
                    "type": "float",
                    "uid": 6
                },
                {
                    "expr": "\u0012fab.types.Shape('iiiiiiiiiiiiiiiiiiiiiam__f1aa-f-4.71X-Xf4.71a-f-9.56Y-Yf9.56a-f-15Z-Zf120am__f1iaa-f-7.85X-Xf7.85a-f-9.56Y-Yf9.56aa-f-4.71X-Xf4.71a-f-12.7Y-Yf12.7a-f-11.86Z-Zf116.86-r++q-Xf4.71q-Yf9.56q-Zf116.86f3.14-r++q-Xf-4.71q-Yf9.56q-Zf116.86f3.14-r++q-Xf4.71q-Yf-9.56q-Zf116.86f3.14-r++q-Xf-4.71q-Yf-9.56q-Zf116.86f3.14-r++q-Xf4.71q-Yf9.56q-Zf-11.86f3.14-r++q-Xf-4.71q-Yf9.56q-Zf-11.86f3.14-r++q-Xf4.71q-Yf-9.56q-Zf-11.86f3.14-r++q-Xf-4.71q-Yf-9.56q-Zf-11.86f3.14am__f1-r+q-Xf4.71q-Yf9.56f3.14a-f-11.86Z-Zf116.86a-r+q-Yf9.56q-Zf116.86f3.14a-f-4.71X-Xf4.71a-r+q-Xf4.71q-Zf116.86f3.14a-f-9.56Y-Yf9.56am__f1-r+q-Xf-4.71q-Yf9.56f3.14a-f-11.86Z-Zf116.86a-r+q-Yf-9.56q-Zf116.86f3.14a-f-4.71X-Xf4.71a-r+q-Xf-4.71q-Zf116.86f3.14a-f-9.56Y-Yf9.56am__f1-r+q-Xf4.71q-Yf-9.56f3.14a-f-11.86Z-Zf116.86a-r+q-Yf9.56q-Zf-11.86f3.14a-f-4.71X-Xf4.71a-r+q-Xf4.71q-Zf-11.86f3.14a-f-9.56Y-Yf9.56am__f1-r+q-Xf-4.71q-Yf-9.56f3.14a-f-11.86Z-Zf116.86a-r+q-Yf-9.56q-Zf-11.86f3.14a-f-4.71X-Xf4.71a-r+q-Xf-4.71q-Zf-11.86f3.14a-f-9.56Y-Yf9.56',float('-7.850000'),float('-12.700000'),float('-15.000000'),float('7.850000'),float('12.700000'),float('120.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 7
                }
            ],
            "inspector": [
                -186,
                148
            ],
            "name": "flashlight",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "",
                "import fab",
                "",
                "title('Rounded cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "input('r', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "# This is the circle's radius in actual units (not a 0-1 fraction)",
                "r_ = r * min([width, height, depth])/2",
                "",
                "output('shape', fab.shapes.rounded_cube(xmin, xmax, ymin, ymax, zmin, zmax, r))",
                "",
                "def drag_hwd(this, dx, dy, dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "# UI",
                "def drag_r(this, x, y, z):",
                "    if abs(this.width) < abs(this.height):",
                "        d = abs(this.width)",
                "        mid = this.ymax + this.height/2 - d / 2",
                "    else:",
                "        d = abs(this.height)",
                "        mid = this.y",
                "    r = 1 - (y - mid) / (d/2)",
                "    this.r = float(min(1, max(0, r)))",
                "",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2, y + height/2, z + depth/2, drag=drag_hwd)",
                "sb.ui.point(xmax, ymax - r_, zmax, drag=drag_r, relative=False)",
                ""
            ],
            "uid": 1
        },
        {
            "datums": [
                {
                    "expr": "0.0",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "reinforcer.zmax-5",
                    "name": "z0",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "20",
                    "name": "z1",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "tube.r+6+2",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('m+f0/*-Xf0f20+*f0-Zf0*f1-f20Z+f0/*-Yf0f20+*f0-Zf0*f1-f20Z_am__f1-r+qXqYf22a-f0Z-Zf20',float('-22.000000'),float('-22.000000'),float('0.000000'),float('22.000000'),float('22.000000'),float('20.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                -33,
                -252
            ],
            "name": "flare",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Cone (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z0', float)",
                "input('z1', float)",
                "input('r', float)",
                "",
                "output('shape', fab.shapes.cone(x, y, z0, z1, r))",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, z0)",
                "    for i in range(36)], close=True)",
                "sb.ui.wireframe([(x,y,z0), (x+r,y,z0)])",
                "sb.ui.wireframe([(x,y,z0), (x,y,z1)])",
                "",
                "sb.ui.point(x, y, z0)",
                "sb.ui.point(x, y, z1)",
                "sb.ui.point(x + r, y, z0, drag=(r, None, None))",
                ""
            ],
            "uid": 2
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__0.__5,__2.__5,__5.__5]",
                    "name": "a",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__1.__7,__7.__6,__8.__6]",
                    "name": "b",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                },
                {
                    "expr": "\u0012fab.types.Shape('aiiam__f1-r+qXqYf14a-f0Z-Zf105m+f0/*-Xf0f20+*f0-Zf0*f1-f20Z+f0/*-Yf0f20+*f0-Zf0*f1-f20Z_am__f1-r+qXqYf22a-f0Z-Zf20am__f1-r+qXqYf20a-f-3Z-Zf0niiiiiiiiiiiiiiiiiiiiiiiam__f1aa-f-4.71X-Xf4.71a-f-9.56Y-Yf9.56a-f-15Z-Zf120am__f1iaa-f-7.85X-Xf7.85a-f-9.56Y-Yf9.56aa-f-4.71X-Xf4.71a-f-12.7Y-Yf12.7a-f-11.86Z-Zf116.86-r++q-Xf4.71q-Yf9.56q-Zf116.86f3.14-r++q-Xf-4.71q-Yf9.56q-Zf116.86f3.14-r++q-Xf4.71q-Yf-9.56q-Zf116.86f3.14-r++q-Xf-4.71q-Yf-9.56q-Zf116.86f3.14-r++q-Xf4.71q-Yf9.56q-Zf-11.86f3.14-r++q-Xf-4.71q-Yf9.56q-Zf-11.86f3.14-r++q-Xf4.71q-Yf-9.56q-Zf-11.86f3.14-r++q-Xf-4.71q-Yf-9.56q-Zf-11.86f3.14am__f1-r+q-Xf4.71q-Yf9.56f3.14a-f-11.86Z-Zf116.86a-r+q-Yf9.56q-Zf116.86f3.14a-f-4.71X-Xf4.71a-r+q-Xf4.71q-Zf116.86f3.14a-f-9.56Y-Yf9.56am__f1-r+q-Xf-4.71q-Yf9.56f3.14a-f-11.86Z-Zf116.86a-r+q-Yf-9.56q-Zf116.86f3.14a-f-4.71X-Xf4.71a-r+q-Xf-4.71q-Zf116.86f3.14a-f-9.56Y-Yf9.56am__f1-r+q-Xf4.71q-Yf-9.56f3.14a-f-11.86Z-Zf116.86a-r+q-Yf9.56q-Zf-11.86f3.14a-f-4.71X-Xf4.71a-r+q-Xf4.71q-Zf-11.86f3.14a-f-9.56Y-Yf9.56am__f1-r+q-Xf-4.71q-Yf-9.56f3.14a-f-11.86Z-Zf116.86a-r+q-Yf-9.56q-Zf-11.86f3.14a-f-4.71X-Xf4.71a-r+q-Xf-4.71q-Zf-11.86f3.14a-f-9.56Y-Yf9.56am__f1aa-f0.35X-Xf7.85a-f8.7Y-Yf21.7a-f-15Z-Zf120am__f1aa-f-14.05X-Xf-7.85a-f-4.5Y-Yf4.5a-f-3Z-Zf57',float('-22.000000'),float('-22.000000'),float('-3.000000'),float('22.000000'),float('22.000000'),float('105.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 2
                }
            ],
            "inspector": [
                530,
                -147
            ],
            "name": "d0",
            "script": [
                "import fab.types",
                "",
                "title('Difference')",
                "input('a', fab.types.Shape)",
                "input('b', fab.types.Shape)",
                "",
                "output('shape', a & ~b)",
                ""
            ],
            "uid": 3
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__3.__2,__6.__6,__9.__6]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0012fab.types.Shape('iiaiiam__f1-r+qXqYf14a-f0Z-Zf105m+f0/*-Xf0f20+*f0-Zf0*f1-f20Z+f0/*-Yf0f20+*f0-Zf0*f1-f20Z_am__f1-r+qXqYf22a-f0Z-Zf20am__f1-r+qXqYf20a-f-3Z-Zf0niiiiiiiiiiiiiiiiiiiiiiiam__f1aa-f-4.71X-Xf4.71a-f-9.56Y-Yf9.56a-f-15Z-Zf120am__f1iaa-f-7.85X-Xf7.85a-f-9.56Y-Yf9.56aa-f-4.71X-Xf4.71a-f-12.7Y-Yf12.7a-f-11.86Z-Zf116.86-r++q-Xf4.71q-Yf9.56q-Zf116.86f3.14-r++q-Xf-4.71q-Yf9.56q-Zf116.86f3.14-r++q-Xf4.71q-Yf-9.56q-Zf116.86f3.14-r++q-Xf-4.71q-Yf-9.56q-Zf116.86f3.14-r++q-Xf4.71q-Yf9.56q-Zf-11.86f3.14-r++q-Xf-4.71q-Yf9.56q-Zf-11.86f3.14-r++q-Xf4.71q-Yf-9.56q-Zf-11.86f3.14-r++q-Xf-4.71q-Yf-9.56q-Zf-11.86f3.14am__f1-r+q-Xf4.71q-Yf9.56f3.14a-f-11.86Z-Zf116.86a-r+q-Yf9.56q-Zf116.86f3.14a-f-4.71X-Xf4.71a-r+q-Xf4.71q-Zf116.86f3.14a-f-9.56Y-Yf9.56am__f1-r+q-Xf-4.71q-Yf9.56f3.14a-f-11.86Z-Zf116.86a-r+q-Yf-9.56q-Zf116.86f3.14a-f-4.71X-Xf4.71a-r+q-Xf-4.71q-Zf116.86f3.14a-f-9.56Y-Yf9.56am__f1-r+q-Xf4.71q-Yf-9.56f3.14a-f-11.86Z-Zf116.86a-r+q-Yf9.56q-Zf-11.86f3.14a-f-4.71X-Xf4.71a-r+q-Xf4.71q-Zf-11.86f3.14a-f-9.56Y-Yf9.56am__f1-r+q-Xf-4.71q-Yf-9.56f3.14a-f-11.86Z-Zf116.86a-r+q-Yf-9.56q-Zf-11.86f3.14a-f-4.71X-Xf4.71a-r+q-Xf-4.71q-Zf-11.86f3.14a-f-9.56Y-Yf9.56am__f1aa-f0.35X-Xf7.85a-f8.7Y-Yf21.7a-f-15Z-Zf120am__f1aa-f-14.05X-Xf-7.85a-f-4.5Y-Yf4.5a-f-3Z-Zf57aam__f1-r+qXqYf14a-f95Z-Zf105nam__f1-r+qXqYf10a-f95Z-Zf105aam__f1-r+qXqYf22a-f-3Z-Zf5nam__f1-r+qXqYf19a-f-3Z-Zf5',float('-22.000000'),float('-22.000000'),float('-3.000000'),float('22.000000'),float('22.000000'),float('105.000000'))",
                    "name": "out",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                }
            ],
            "inspector": [
                907,
                -154
            ],
            "name": "m0",
            "script": [
                "import fab",
                "",
                "title('Mesh (.stl)')",
                "",
                "input('shape', fab.types.Shape)",
                "output('out', shape)",
                "",
                "sb.export.stl(shape)",
                ""
            ],
            "uid": 4
        },
        {
            "datums": [
                {
                    "expr": "0.0",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "self.zmax-3",
                    "name": "zmin",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "tube.zmin",
                    "name": "zmax",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "tube.r+6",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1-r+qXqYf20a-f-3Z-Zf0',float('-20.000000'),float('-20.000000'),float('-3.000000'),float('20.000000'),float('20.000000'),float('0.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                374,
                -722
            ],
            "name": "grip",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Cylinder (Z)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('zmin', float)",
                "input('zmax', float)",
                "input('r', float)",
                "",
                "output('shape', fab.shapes.cylinder(x, y, zmin, zmax, r))",
                "",
                "# UI",
                "sb.ui.wireframe([(x, y, zmin), (x, y, zmax)])",
                "sb.ui.wireframe([(x, y, zmin), (x+r, y, zmin)])",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmin)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmax)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.point(x, y, zmin)",
                "sb.ui.point(x, y, zmax)",
                "sb.ui.point(x + r, y, zmin, drag=(r, None, None))",
                ""
            ],
            "uid": 5
        },
        {
            "datums": [
                {
                    "expr": "self.zmax-10",
                    "name": "zmin",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "tube.zmax",
                    "name": "zmax",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "x",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "0.0",
                    "name": "y",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "10",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "tube.r",
                    "name": "R",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('aam__f1-r+qXqYf14a-f95Z-Zf105nam__f1-r+qXqYf10a-f95Z-Zf105',float('-14.000000'),float('-14.000000'),float('95.000000'),float('14.000000'),float('14.000000'),float('105.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                868,
                -619
            ],
            "name": "sight",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Ring (Z)')",
                "",
                "input('zmin', float)",
                "input('zmax', float)",
                "input('x', float)",
                "input('y', float)",
                "input('r', float)",
                "input('R', float)",
                "",
                "output('shape', fab.shapes.cylinder(x,y, zmin, zmax, R) & ~fab.shapes.cylinder(x, y, zmin, zmax,  r))",
                "",
                "# UI",
                "sb.ui.wireframe([(x, y, zmin), (x, y, zmax)])",
                "sb.ui.wireframe([(x, y, zmax), (x, y, zmax + r)])",
                "sb.ui.wireframe([(x, y,zmin), (x, y, zmin + R)])",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * R + x, ",
                "     math.sin(i/36. * 2*math.pi) * R + y, zmin)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmax)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.point(x, y, zmin)",
                "sb.ui.point(x, y, zmax)",
                "sb.ui.point(x, y, zmin + R, drag=(None, None, R))",
                "sb.ui.point(x, y, zmax + r, drag=(None, None, r))",
                ""
            ],
            "uid": 6
        },
        {
            "datums": [
                {
                    "expr": "flashlight.x+flashlight.width/2-self.width/2",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "flashlight.y+flashlight.height/2+self.height/2-4",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "flashlight.z",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "7.5",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "5+5+3",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "flashlight.depth",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1aa-f0.35X-Xf7.85a-f8.7Y-Yf21.7a-f-15Z-Zf120',float('0.350000'),float('8.700000'),float('-15.000000'),float('7.850000'),float('21.700001'),float('120.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                -80,
                587
            ],
            "name": "switch_allowance",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "# Matt Keeter 5/22/15",
                "",
                "import fab",
                "",
                "title('Cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "output('shape', fab.shapes.cube(xmin, xmax, ymin, ymax, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "",
                "def drag_hwd(this, dx,dy,dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2.0, y + height/2.0, z + depth/2.0,",
                "             drag=drag_hwd)",
                "",
                ""
            ],
            "uid": 7
        },
        {
            "datums": [
                {
                    "expr": "flashlight.x-flashlight.width/2-self.width/2",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "grip.zmin+self.depth/2",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "20.5-14.8+.5",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "9",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "60",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1aa-f-14.05X-Xf-7.85a-f-4.5Y-Yf4.5a-f-3Z-Zf57',float('-14.050000'),float('-4.500000'),float('-3.000000'),float('-7.850000'),float('4.500000'),float('57.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                -85.77704739495866,
                1071.6560986227307
            ],
            "name": "clip_allowance",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "# Matt Keeter 5/22/15",
                "",
                "import fab",
                "",
                "title('Cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "output('shape', fab.shapes.cube(xmin, xmax, ymin, ymax, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "",
                "def drag_hwd(this, dx,dy,dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2.0, y + height/2.0, z + depth/2.0,",
                "             drag=drag_hwd)",
                "",
                ""
            ],
            "uid": 8
        },
        {
            "datums": [
                {
                    "expr": "grip.zmin",
                    "name": "zmin",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "grip.zmax+5",
                    "name": "zmax",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "x",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "0.0",
                    "name": "y",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "grip.r-1",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "self.r+3",
                    "name": "R",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('aam__f1-r+qXqYf22a-f-3Z-Zf5nam__f1-r+qXqYf19a-f-3Z-Zf5',float('-22.000000'),float('-22.000000'),float('-3.000000'),float('22.000000'),float('22.000000'),float('5.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                857.5435049263384,
                -1034.0441431544205
            ],
            "name": "reinforcer",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Ring (Z)')",
                "",
                "input('zmin', float)",
                "input('zmax', float)",
                "input('x', float)",
                "input('y', float)",
                "input('r', float)",
                "input('R', float)",
                "",
                "output('shape', fab.shapes.cylinder(x,y, zmin, zmax, R) & ~fab.shapes.cylinder(x, y, zmin, zmax,  r))",
                "",
                "# UI",
                "sb.ui.wireframe([(x, y, zmin), (x, y, zmax)])",
                "sb.ui.wireframe([(x, y, zmax), (x, y, zmax + r)])",
                "sb.ui.wireframe([(x, y,zmin), (x, y, zmin + R)])",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * R + x, ",
                "     math.sin(i/36. * 2*math.pi) * R + y, zmin)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmax)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.point(x, y, zmin)",
                "sb.ui.point(x, y, zmax)",
                "sb.ui.point(x, y, zmin + R, drag=(None, None, R))",
                "sb.ui.point(x, y, zmax + r, drag=(None, None, r))",
                ""
            ],
            "uid": 9
        }
    ],
    "protocol": 6,
    "type": "sb"
}
