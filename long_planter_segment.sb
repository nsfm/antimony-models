{
    "nodes": [
        {
            "datums": [
                {
                    "expr": "0",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "100",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "89",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "3",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "0.25",
                    "name": "r",
                    "type": "float",
                    "uid": 6
                },
                {
                    "expr": "\u0012fab.types.Shape('iiiiiiiiiiiiiiiiiiiiiam__f1aa-f-49.625X-Xf49.625a-f-44.125Y-Yf44.125a-f-1.5Z-Zf1.5am__f1iaa-f-50X-Xf50a-f-44.125Y-Yf44.125aa-f-49.625X-Xf49.625a-f-44.5Y-Yf44.5a-f-1.125Z-Zf1.125-r++q-Xf49.625q-Yf44.125q-Zf1.125f0.375-r++q-Xf-49.625q-Yf44.125q-Zf1.125f0.375-r++q-Xf49.625q-Yf-44.125q-Zf1.125f0.375-r++q-Xf-49.625q-Yf-44.125q-Zf1.125f0.375-r++q-Xf49.625q-Yf44.125q-Zf-1.125f0.375-r++q-Xf-49.625q-Yf44.125q-Zf-1.125f0.375-r++q-Xf49.625q-Yf-44.125q-Zf-1.125f0.375-r++q-Xf-49.625q-Yf-44.125q-Zf-1.125f0.375am__f1-r+q-Xf49.625q-Yf44.125f0.375a-f-1.125Z-Zf1.125a-r+q-Yf44.125q-Zf1.125f0.375a-f-49.625X-Xf49.625a-r+q-Xf49.625q-Zf1.125f0.375a-f-44.125Y-Yf44.125am__f1-r+q-Xf-49.625q-Yf44.125f0.375a-f-1.125Z-Zf1.125a-r+q-Yf-44.125q-Zf1.125f0.375a-f-49.625X-Xf49.625a-r+q-Xf-49.625q-Zf1.125f0.375a-f-44.125Y-Yf44.125am__f1-r+q-Xf49.625q-Yf-44.125f0.375a-f-1.125Z-Zf1.125a-r+q-Yf44.125q-Zf-1.125f0.375a-f-49.625X-Xf49.625a-r+q-Xf49.625q-Zf-1.125f0.375a-f-44.125Y-Yf44.125am__f1-r+q-Xf-49.625q-Yf-44.125f0.375a-f-1.125Z-Zf1.125a-r+q-Yf-44.125q-Zf-1.125f0.375a-f-49.625X-Xf49.625a-r+q-Xf-49.625q-Zf-1.125f0.375a-f-44.125Y-Yf44.125',float('-50.000000'),float('-44.500000'),float('-1.500000'),float('50.000000'),float('44.500000'),float('1.500000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 7
                }
            ],
            "inspector": [
                -300,
                -282
            ],
            "name": "table",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "",
                "import fab",
                "",
                "title('Rounded cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "input('r', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "# This is the circle's radius in actual units (not a 0-1 fraction)",
                "r_ = r * min([width, height, depth])/2",
                "",
                "output('shape', fab.shapes.rounded_cube(xmin, xmax, ymin, ymax, zmin, zmax, r))",
                "",
                "def drag_hwd(this, dx, dy, dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "# UI",
                "def drag_r(this, x, y, z):",
                "    if abs(this.width) < abs(this.height):",
                "        d = abs(this.width)",
                "        mid = this.ymax + this.height/2 - d / 2",
                "    else:",
                "        d = abs(this.height)",
                "        mid = this.y",
                "    r = 1 - (y - mid) / (d/2)",
                "    this.r = float(min(1, max(0, r)))",
                "",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2, y + height/2, z + depth/2, drag=drag_hwd)",
                "sb.ui.point(xmax, ymax - r_, zmax, drag=drag_r, relative=False)",
                ""
            ],
            "uid": 0
        },
        {
            "datums": [
                {
                    "expr": "table.x",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "table.y+table.height/2-self.r*2",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "table.z-table.depth",
                    "name": "zmin",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "self.zmin+30",
                    "name": "zmax",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "6",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1-r+qXq-Yf32.5f6a-f-3Z-Zf27',float('-6.000000'),float('26.500000'),float('-3.000000'),float('6.000000'),float('38.500000'),float('27.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                -280,
                158
            ],
            "name": "tube_hole",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Cylinder (Z)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('zmin', float)",
                "input('zmax', float)",
                "input('r', float)",
                "",
                "output('shape', fab.shapes.cylinder(x, y, zmin, zmax, r))",
                "",
                "# UI",
                "sb.ui.wireframe([(x, y, zmin), (x, y, zmax)])",
                "sb.ui.wireframe([(x, y, zmin), (x+r, y, zmin)])",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmin)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmax)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.point(x, y, zmin)",
                "sb.ui.point(x, y, zmax)",
                "sb.ui.point(x + r, y, zmin, drag=(r, None, None))",
                ""
            ],
            "uid": 1
        },
        {
            "datums": [
                {
                    "expr": "0.0",
                    "name": "_x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "table.y",
                    "name": "y0",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "_z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "\u0011[__1.__5]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('im_-*f2f0Y_am__f1-r+qXq-Yf32.5f6a-f-3Z-Zf27am__f1-r+qXq-Yf32.5f6a-f-3Z-Zf27',float('-6.000000'),float('-38.500000'),float('-3.000000'),float('6.000000'),float('38.500000'),float('27.000000'))",
                    "name": "reflected",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                158,
                255
            ],
            "name": "m0",
            "script": [
                "import fab",
                "",
                "title('Mirror (Y)')",
                "",
                "input('_x', float)",
                "input('y0', float)",
                "input('_z', float)",
                "",
                "input('shape', fab.types.Shape)",
                "output('reflected', fab.shapes.reflect_y(shape, y0) | shape)",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (_x - 1, y0, _z + 1),",
                "    (_x + 1, y0, _z + 1),",
                "    (_x + 1, y0, _z - 1),",
                "    (_x - 1, y0, _z - 1)], color=sb.color.teal, close=True)",
                "",
                "sb.ui.point(_x, y0, _z, color=sb.color.teal)",
                "",
                ""
            ],
            "uid": 2
        },
        {
            "datums": [
                {
                    "expr": "table.x+table.width/4",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "table.y",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "table.z-table.depth/2",
                    "name": "zmin",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "self.zmin+30",
                    "name": "zmax",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "4",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1-r+q-Xf25qYf4a-f-1.5Z-Zf28.5',float('21.000000'),float('-4.000000'),float('-1.500000'),float('29.000000'),float('4.000000'),float('28.500000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                278,
                -226
            ],
            "name": "support",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Cylinder (Z)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('zmin', float)",
                "input('zmax', float)",
                "input('r', float)",
                "",
                "output('shape', fab.shapes.cylinder(x, y, zmin, zmax, r))",
                "",
                "# UI",
                "sb.ui.wireframe([(x, y, zmin), (x, y, zmax)])",
                "sb.ui.wireframe([(x, y, zmin), (x+r, y, zmin)])",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmin)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmax)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.point(x, y, zmin)",
                "sb.ui.point(x, y, zmax)",
                "sb.ui.point(x + r, y, zmin, drag=(r, None, None))",
                ""
            ],
            "uid": 3
        },
        {
            "datums": [
                {
                    "expr": "table.x",
                    "name": "x0",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "_y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "_z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "\u0011[__3.__5]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('im-*f2f0X__am__f1-r+q-Xf25qYf4a-f-1.5Z-Zf28.5am__f1-r+q-Xf25qYf4a-f-1.5Z-Zf28.5',float('-29.000000'),float('-4.000000'),float('-1.500000'),float('29.000000'),float('4.000000'),float('28.500000'))",
                    "name": "reflected",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                636,
                -124
            ],
            "name": "m1",
            "script": [
                "import fab",
                "",
                "title('Mirror (X)')",
                "",
                "input('x0', float)",
                "input('_y', float)",
                "input('_z', float)",
                "",
                "input('shape', fab.types.Shape)",
                "output('reflected', fab.shapes.reflect_x(shape, x0) | shape)",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (x0, _y - 1, _z + 1),",
                "    (x0, _y + 1, _z + 1),",
                "    (x0, _y + 1, _z - 1),",
                "    (x0, _y - 1, _z - 1)], color=sb.color.teal, close=True)",
                "",
                "sb.ui.point(x0, _y, _z, color=sb.color.teal)",
                ""
            ],
            "uid": 4
        },
        {
            "datums": [
                {
                    "expr": "table.x-table.width/2+self.width/2",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "table.y+table.height/2-self.height/2",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "table.z-table.depth/2+self.depth/2",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "table.width/5",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "3",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "30",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1aa-f-50X-Xf-30a-f41.5Y-Yf44.5a-f-1.5Z-Zf28.5',float('-50.000000'),float('41.500000'),float('-1.500000'),float('-30.000000'),float('44.500000'),float('28.500000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                -234.089360976389,
                -1614.61197164638
            ],
            "name": "leg",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "# Matt Keeter 5/22/15",
                "",
                "import fab",
                "",
                "title('Cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "output('shape', fab.shapes.cube(xmin, xmax, ymin, ymax, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "",
                "def drag_hwd(this, dx,dy,dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2.0, y + height/2.0, z + depth/2.0,",
                "             drag=drag_hwd)",
                "",
                ""
            ],
            "uid": 5
        },
        {
            "datums": [
                {
                    "expr": "leg.x",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "leg.y-leg.height",
                    "name": "ymin",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "leg.y+leg.height",
                    "name": "ymax",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "leg.z-leg.depth/7",
                    "name": "z",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "leg.width/4",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('a-r+q-Xf-40q-Zf9.21429f5a-f40Y-Yf46',float('-45.000000'),float('40.000000'),float('4.214286'),float('-35.000000'),float('46.000000'),float('14.214286'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                -634.1579357452388,
                -1299.3393148903729
            ],
            "name": "legarch",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Cylinder (Y)')",
                "",
                "input('x', float)",
                "input('ymin', float)",
                "input('ymax', float)",
                "input('z', float)",
                "input('r', float)",
                "",
                "output('shape', fab.shapes.cylinder_y(x, ymin, ymax, z, r))",
                "",
                "# UI",
                "sb.ui.wireframe([(x, ymin, z), (x, ymax, z)])",
                "sb.ui.wireframe([(x, ymin, z), (x+r, ymin, z)])",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x, ymin,",
                "     math.sin(i/36. * 2*math.pi) * r + z)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x, ymax,",
                "     math.sin(i/36. * 2*math.pi) * r + z)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.point(x, ymin, z)",
                "sb.ui.point(x, ymax, z)",
                "sb.ui.point(x+r, ymin, z, drag=(r, None, None))",
                ""
            ],
            "uid": 6
        },
        {
            "datums": [
                {
                    "expr": "legarch.x",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "leg.y",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "legarch.z+self.depth/2",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "legarch.r*2",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "leg.height",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "(leg.z+leg.depth/2)-(leg.depth/7)",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1aa-f-45X-Xf-35a-f41.5Y-Yf44.5a-f9.21429Z-Zf33.4286',float('-45.000000'),float('41.500000'),float('9.214286'),float('-35.000000'),float('44.500000'),float('33.428570'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                -243.27411991693202,
                -886.5097960880541
            ],
            "name": "c1",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "# Matt Keeter 5/22/15",
                "",
                "import fab",
                "",
                "title('Cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "output('shape', fab.shapes.cube(xmin, xmax, ymin, ymax, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "",
                "def drag_hwd(this, dx,dy,dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2.0, y + height/2.0, z + depth/2.0,",
                "             drag=drag_hwd)",
                "",
                ""
            ],
            "uid": 7
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__5.__6]",
                    "name": "a",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__6.__5,__7.__6]",
                    "name": "b",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                },
                {
                    "expr": "\u0012fab.types.Shape('aam__f1aa-f-50X-Xf-30a-f41.5Y-Yf44.5a-f-1.5Z-Zf28.5nia-r+q-Xf-40q-Zf9.21429f5a-f40Y-Yf46am__f1aa-f-45X-Xf-35a-f41.5Y-Yf44.5a-f9.21429Z-Zf33.4286',float('-50.000000'),float('41.500000'),float('-1.500000'),float('-30.000000'),float('44.500000'),float('28.500000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 2
                }
            ],
            "inspector": [
                172.45193071471968,
                -1026.800945264707
            ],
            "name": "d0",
            "script": [
                "import fab.types",
                "",
                "title('Difference')",
                "input('a', fab.types.Shape)",
                "input('b', fab.types.Shape)",
                "",
                "output('shape', a & ~b)",
                ""
            ],
            "uid": 8
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__8.__2]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "_x",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "_y",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "table.width/leg.width",
                    "name": "i",
                    "type": "int",
                    "uid": 3
                },
                {
                    "expr": "1",
                    "name": "j",
                    "type": "int",
                    "uid": 4
                },
                {
                    "expr": "leg.width",
                    "name": "dx",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "0",
                    "name": "dy",
                    "type": "float",
                    "uid": 6
                },
                {
                    "expr": "\u0012fab.types.Shape('m-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0iiiim-Xf0-Yf0-Zf0aam__f1aa-f-50X-Xf-30a-f41.5Y-Yf44.5a-f-1.5Z-Zf28.5nia-r+q-Xf-40q-Zf9.21429f5a-f40Y-Yf46am__f1aa-f-45X-Xf-35a-f41.5Y-Yf44.5a-f9.21429Z-Zf33.4286m-Xf20-Yf0-Zf0aam__f1aa-f-50X-Xf-30a-f41.5Y-Yf44.5a-f-1.5Z-Zf28.5nia-r+q-Xf-40q-Zf9.21429f5a-f40Y-Yf46am__f1aa-f-45X-Xf-35a-f41.5Y-Yf44.5a-f9.21429Z-Zf33.4286m-Xf40-Yf0-Zf0aam__f1aa-f-50X-Xf-30a-f41.5Y-Yf44.5a-f-1.5Z-Zf28.5nia-r+q-Xf-40q-Zf9.21429f5a-f40Y-Yf46am__f1aa-f-45X-Xf-35a-f41.5Y-Yf44.5a-f9.21429Z-Zf33.4286m-Xf60-Yf0-Zf0aam__f1aa-f-50X-Xf-30a-f41.5Y-Yf44.5a-f-1.5Z-Zf28.5nia-r+q-Xf-40q-Zf9.21429f5a-f40Y-Yf46am__f1aa-f-45X-Xf-35a-f41.5Y-Yf44.5a-f9.21429Z-Zf33.4286m-Xf80-Yf0-Zf0aam__f1aa-f-50X-Xf-30a-f41.5Y-Yf44.5a-f-1.5Z-Zf28.5nia-r+q-Xf-40q-Zf9.21429f5a-f40Y-Yf46am__f1aa-f-45X-Xf-35a-f41.5Y-Yf44.5a-f9.21429Z-Zf33.4286',float('-50.000000'),float('41.500000'),float('-1.500000'),float('50.000000'),float('44.500000'),float('28.500000'))",
                    "name": "array",
                    "type": "_fabtypes.Shape",
                    "uid": 7
                }
            ],
            "inspector": [
                591.4424617548204,
                -986.0687765727428
            ],
            "name": "a0",
            "script": [
                "import fab",
                "",
                "title('Array (2D)')",
                "",
                "input('shape', fab.types.Shape)",
                "input('_x', float)",
                "input('_y', float)",
                "input('i', int)",
                "input('j', int)",
                "input('dx', float)",
                "input('dy', float)",
                "",
                "output('array', fab.shapes.iterate3d(shape, i, j, 1, dx, dy, 0))",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (_x + dx, _y, 0), (_x, _y, 0), (_x, _y + dy, 0)], color=sb.color.teal)",
                "sb.ui.wireframe([",
                "    (_x + dx, _y - 0.3, 0), (_x + dx, _y + 0.3, 0)], color=sb.color.teal)",
                "sb.ui.wireframe([",
                "    (_x + 0.3, _y + dy, 0), (_x - 0.3, _y + dy, 0)], color=sb.color.teal)",
                "",
                "sb.ui.point(_x, _y, 0, color=sb.color.teal)",
                "sb.ui.point(_x + dx, _y, 0, color=sb.color.teal, drag=(dx, None, None))",
                "sb.ui.point(_x, _y + dy, 0, color=sb.color.teal, drag=(None, dy, None))",
                ""
            ],
            "uid": 9
        }
    ],
    "protocol": 6,
    "type": "sb"
}
