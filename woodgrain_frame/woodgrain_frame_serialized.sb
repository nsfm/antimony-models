{
    "nodes": [
        {
            "datums": [
                {
                    "expr": "0",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "art.width+30",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "art.height+30",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "6",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": ".5",
                    "name": "r",
                    "type": "float",
                    "uid": 6
                },
                {
                    "expr": "\u0012fab.types.Shape('iiiiiiiiiiiiiiiiiiiiiam__f1aa-f-76X-Xf76a-f-113.5Y-Yf113.5a-f-3Z-Zf3am__f1iaa-f-77.5X-Xf77.5a-f-113.5Y-Yf113.5aa-f-76X-Xf76a-f-115Y-Yf115a-f-1.5Z-Zf1.5-r++q-Xf76q-Yf113.5q-Zf1.5f1.5-r++q-Xf-76q-Yf113.5q-Zf1.5f1.5-r++q-Xf76q-Yf-113.5q-Zf1.5f1.5-r++q-Xf-76q-Yf-113.5q-Zf1.5f1.5-r++q-Xf76q-Yf113.5q-Zf-1.5f1.5-r++q-Xf-76q-Yf113.5q-Zf-1.5f1.5-r++q-Xf76q-Yf-113.5q-Zf-1.5f1.5-r++q-Xf-76q-Yf-113.5q-Zf-1.5f1.5am__f1-r+q-Xf76q-Yf113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf113.5q-Zf1.5f1.5a-f-76X-Xf76a-r+q-Xf76q-Zf1.5f1.5a-f-113.5Y-Yf113.5am__f1-r+q-Xf-76q-Yf113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf-113.5q-Zf1.5f1.5a-f-76X-Xf76a-r+q-Xf-76q-Zf1.5f1.5a-f-113.5Y-Yf113.5am__f1-r+q-Xf76q-Yf-113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf113.5q-Zf-1.5f1.5a-f-76X-Xf76a-r+q-Xf76q-Zf-1.5f1.5a-f-113.5Y-Yf113.5am__f1-r+q-Xf-76q-Yf-113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf-113.5q-Zf-1.5f1.5a-f-76X-Xf76a-r+q-Xf-76q-Zf-1.5f1.5a-f-113.5Y-Yf113.5',float('-77.500000'),float('-115.000000'),float('-3.000000'),float('77.500000'),float('115.000000'),float('3.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 7
                }
            ],
            "inspector": [
                2673.976573187748,
                -534.411510106522
            ],
            "name": "body",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "",
                "import fab",
                "",
                "title('Rounded cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "input('r', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "# This is the circle's radius in actual units (not a 0-1 fraction)",
                "r_ = r * min([width, height, depth])/2",
                "",
                "output('shape', fab.shapes.rounded_cube(xmin, xmax, ymin, ymax, zmin, zmax, r))",
                "",
                "def drag_hwd(this, dx, dy, dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "# UI",
                "def drag_r(this, x, y, z):",
                "    if abs(this.width) < abs(this.height):",
                "        d = abs(this.width)",
                "        mid = this.ymax + this.height/2 - d / 2",
                "    else:",
                "        d = abs(this.height)",
                "        mid = this.y",
                "    r = 1 - (y - mid) / (d/2)",
                "    this.r = float(min(1, max(0, r)))",
                "",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2, y + height/2, z + depth/2, drag=drag_hwd)",
                "sb.ui.point(xmax, ymax - r_, zmax, drag=drag_r, relative=False)",
                ""
            ],
            "uid": 0
        },
        {
            "datums": [
                {
                    "expr": "body.x",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "body.y",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "body.z-2",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "125",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "200",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "body.depth-2",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1aa-f-62.5X-Xf62.5a-f-100Y-Yf100a-f-4Z-Zf0',float('-62.500000'),float('-100.000000'),float('-4.000000'),float('62.500000'),float('100.000000'),float('0.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                2217.2937371566727,
                -484.34172622898217
            ],
            "name": "art",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "# Matt Keeter 5/22/15",
                "",
                "import fab",
                "",
                "title('Cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "output('shape', fab.shapes.cube(xmin, xmax, ymin, ymax, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "",
                "def drag_hwd(this, dx,dy,dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2.0, y + height/2.0, z + depth/2.0,",
                "             drag=drag_hwd)",
                "",
                ""
            ],
            "uid": 1
        },
        {
            "datums": [
                {
                    "expr": "art.x",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "art.y",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "body.z",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "art.width-6",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "art.height-6",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "body.depth",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1aa-f-59.5X-Xf59.5a-f-97Y-Yf97a-f-3Z-Zf3',float('-59.500000'),float('-97.000000'),float('-3.000000'),float('59.500000'),float('97.000000'),float('3.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                2687.3656627091304,
                38.24648741435635
            ],
            "name": "viewport",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "# Matt Keeter 5/22/15",
                "",
                "import fab",
                "",
                "title('Cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "output('shape', fab.shapes.cube(xmin, xmax, ymin, ymax, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "",
                "def drag_hwd(this, dx,dy,dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2.0, y + height/2.0, z + depth/2.0,",
                "             drag=drag_hwd)",
                "",
                ""
            ],
            "uid": 2
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__0.__7]",
                    "name": "a",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__6.__4,__15.__5,__2.__6,__1.__6]",
                    "name": "b",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                },
                {
                    "expr": "\u0012fab.types.Shape('aiiiiiiiiiiiiiiiiiiiiiam__f1aa-f-76X-Xf76a-f-113.5Y-Yf113.5a-f-3Z-Zf3am__f1iaa-f-77.5X-Xf77.5a-f-113.5Y-Yf113.5aa-f-76X-Xf76a-f-115Y-Yf115a-f-1.5Z-Zf1.5-r++q-Xf76q-Yf113.5q-Zf1.5f1.5-r++q-Xf-76q-Yf113.5q-Zf1.5f1.5-r++q-Xf76q-Yf-113.5q-Zf1.5f1.5-r++q-Xf-76q-Yf-113.5q-Zf1.5f1.5-r++q-Xf76q-Yf113.5q-Zf-1.5f1.5-r++q-Xf-76q-Yf113.5q-Zf-1.5f1.5-r++q-Xf76q-Yf-113.5q-Zf-1.5f1.5-r++q-Xf-76q-Yf-113.5q-Zf-1.5f1.5am__f1-r+q-Xf76q-Yf113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf113.5q-Zf1.5f1.5a-f-76X-Xf76a-r+q-Xf76q-Zf1.5f1.5a-f-113.5Y-Yf113.5am__f1-r+q-Xf-76q-Yf113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf-113.5q-Zf1.5f1.5a-f-76X-Xf76a-r+q-Xf-76q-Zf1.5f1.5a-f-113.5Y-Yf113.5am__f1-r+q-Xf76q-Yf-113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf113.5q-Zf-1.5f1.5a-f-76X-Xf76a-r+q-Xf76q-Zf-1.5f1.5a-f-113.5Y-Yf113.5am__f1-r+q-Xf-76q-Yf-113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf-113.5q-Zf-1.5f1.5a-f-76X-Xf76a-r+q-Xf-76q-Zf-1.5f1.5a-f-113.5Y-Yf113.5niiim-*f2f-40.5X__am__f1m-Xf-40.5-Yf-110.5-Zf0m+f0/-Xf0f7+f0/-Yf0f7_m-Xf0-Yf1-Zf0iiim-Xf0-Yf-1-Zf0iaa-r+q-Xf0.275q-Yf0.275f0.275n-r+q-Xf0.275q-Yf0.275f0.175aa-f0X-Xf0.55a-f0Y-Yf0.275aa-f0.45X-Xf0.55a-f0.275Y-Yf1m-Xf0.65-Yf-1-Zf0-r+q-Xf0.075q-Yf0.075f0.075m-Xf0.9-Yf-1-Zf0iaa-r+q-Xf0.1q-Yf0.5f0.5n-r+q-Xf0.1q-Yf0.5f0.4aa-f0X-Xf1a-f0Y-Yf1aa-f0X-Xf0.1a-f0Y-Yf1m-Xf1.6-Yf-1-Zf0-r+q-Xf0.075q-Yf0.075f0.075a-f-3Z-Zf-2am__f1mXYf3am-Xf-53.6899-Yf99.4873-Zf3m*X+f1xn/r++qXqYqZf30.981*Y+f1xn/r++qXqYqZf30.981*Z+f1xn/r++qXqYqZf30.981m-Xf53.6899-Yf-99.4873-Zf-3m-Xf66.8454-Yf-113.805-Zf3m*X-f1xn/r++qXqYqZf53.409*Y-f1xn/r++qXqYqZf53.409*Z-f1xn/r++qXqYqZf53.409m-Xf-66.8454-Yf113.805-Zf-3m-Xf-34.5161-Yf111.997-Zf3m*X-f1xn/r++qXqYqZf54.5185*Y-f1xn/r++qXqYqZf54.5185*Z-f1xn/r++qXqYqZf54.5185m-Xf34.5161-Yf-111.997-Zf-3m-Xf60.5453-Yf100.024-Zf3m*X-f1xn/r++qXqYqZf42.744*Y-f1xn/r++qXqYqZf42.744*Z-f1xn/r++qXqYqZf42.744m-Xf-60.5453-Yf-100.024-Zf-3m-Xf-96.9284-Yf-91.4742-Zf3m*X-f1xn/r++qXqYqZf65.0745*Y-f1xn/r++qXqYqZf65.0745*Z-f1xn/r++qXqYqZf65.0745m-Xf96.9284-Yf91.4742-Zf-3m-Xf-60.6143-Yf-91.1166-Zf3m*X+f1xn/r++qXqYqZf39.9971*Y+f1xn/r++qXqYqZf39.9971*Z+f1xn/r++qXqYqZf39.9971m-Xf60.6143-Yf91.1166-Zf-3m-Xf-43.8976-Yf-115.104-Zf3m*X-f1xn/r++qXqYqZf29.3708*Y-f1xn/r++qXqYqZf29.3708*Z-f1xn/r++qXqYqZf29.3708m-Xf43.8976-Yf115.104-Zf-3m-Xf64.6244-Yf32.0754-Zf3m*X+f1xn/r++qXqYqZf54.4406*Y+f1xn/r++qXqYqZf54.4406*Z+f1xn/r++qXqYqZf54.4406m-Xf-64.6244-Yf-32.0754-Zf-3m-Xf-68.2032-Yf50.65-Zf3m*X+f1xn/r++qXqYqZf44.4211*Y+f1xn/r++qXqYqZf44.4211*Z+f1xn/r++qXqYqZf44.4211m-Xf68.2032-Yf-50.65-Zf-3m-Xf-55.4637-Yf93.2748-Zf3m*X-f1xn/r++qXqYqZf49.7967*Y-f1xn/r++qXqYqZf49.7967*Z-f1xn/r++qXqYqZf49.7967m-Xf55.4637-Yf-93.2748-Zf-3m-Xf-100.225-Yf98.7316-Zf3m*X+f1xn/r++qXqYqZf39.6345*Y+f1xn/r++qXqYqZf39.6345*Z+f1xn/r++qXqYqZf39.6345m-Xf100.225-Yf-98.7316-Zf-3m-Xf-65.8134-Yf108.021-Zf3m*X-f1xn/r++qXqYqZf64.2834*Y-f1xn/r++qXqYqZf64.2834*Z-f1xn/r++qXqYqZf64.2834m-Xf65.8134-Yf-108.021-Zf-3m-Xf37.1028-Yf115.833-Zf3m*X+f1xn/r++qXqYqZf69.9546*Y+f1xn/r++qXqYqZf69.9546*Z+f1xn/r++qXqYqZf69.9546m-Xf-37.1028-Yf-115.833-Zf-3m-Xf0-Yf0-Zf0m+*f0.4508X*f0.892625Y+*f-0.892625X*f0.4508Y_m-Xf-0-Yf-0-Zf0a= abs( sin(X / 12.566370614359172)*cos(Y / 1.5707963267948966) + sin(Y / 1.5707963267948966)*cos(Z /6283.185307179586) + sin(Z / 6283.185307179586)*cos(X / 12.566370614359172)) - 0.49835744842250274;am__f1aa-f-465X-Xf465a-f-690Y-Yf690a-f2Z-Zf4am__f1aa-f-77.5X-Xf77.5a-f-115Y-Yf115a-f2.5Z-Zf3.5a-f2.7Z-Zf3am__f1aa-f-59.5X-Xf59.5a-f-97Y-Yf97a-f-3Z-Zf3am__f1aa-f-62.5X-Xf62.5a-f-100Y-Yf100a-f-4Z-Zf0',float('-77.500000'),float('-115.000000'),float('-3.000000'),float('77.500000'),float('115.000000'),float('3.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 2
                }
            ],
            "inspector": [
                3265.268016469022,
                -108.048125252266
            ],
            "name": "d0",
            "script": [
                "import fab.types",
                "",
                "title('Difference')",
                "input('a', fab.types.Shape)",
                "input('b', fab.types.Shape)",
                "",
                "output('shape', a & ~b)",
                ""
            ],
            "uid": 3
        },
        {
            "datums": [
                {
                    "expr": "0.0",
                    "name": "_x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "_y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "self.zmax-0.3",
                    "name": "zmin",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "body.z+body.depth/2",
                    "name": "zmax",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "\u0011[__46.__10]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1mXYf3am-Xf-53.6899-Yf99.4873-Zf3m*X+f1xn/r++qXqYqZf30.981*Y+f1xn/r++qXqYqZf30.981*Z+f1xn/r++qXqYqZf30.981m-Xf53.6899-Yf-99.4873-Zf-3m-Xf66.8454-Yf-113.805-Zf3m*X-f1xn/r++qXqYqZf53.409*Y-f1xn/r++qXqYqZf53.409*Z-f1xn/r++qXqYqZf53.409m-Xf-66.8454-Yf113.805-Zf-3m-Xf-34.5161-Yf111.997-Zf3m*X-f1xn/r++qXqYqZf54.5185*Y-f1xn/r++qXqYqZf54.5185*Z-f1xn/r++qXqYqZf54.5185m-Xf34.5161-Yf-111.997-Zf-3m-Xf60.5453-Yf100.024-Zf3m*X-f1xn/r++qXqYqZf42.744*Y-f1xn/r++qXqYqZf42.744*Z-f1xn/r++qXqYqZf42.744m-Xf-60.5453-Yf-100.024-Zf-3m-Xf-96.9284-Yf-91.4742-Zf3m*X-f1xn/r++qXqYqZf65.0745*Y-f1xn/r++qXqYqZf65.0745*Z-f1xn/r++qXqYqZf65.0745m-Xf96.9284-Yf91.4742-Zf-3m-Xf-60.6143-Yf-91.1166-Zf3m*X+f1xn/r++qXqYqZf39.9971*Y+f1xn/r++qXqYqZf39.9971*Z+f1xn/r++qXqYqZf39.9971m-Xf60.6143-Yf91.1166-Zf-3m-Xf-43.8976-Yf-115.104-Zf3m*X-f1xn/r++qXqYqZf29.3708*Y-f1xn/r++qXqYqZf29.3708*Z-f1xn/r++qXqYqZf29.3708m-Xf43.8976-Yf115.104-Zf-3m-Xf64.6244-Yf32.0754-Zf3m*X+f1xn/r++qXqYqZf54.4406*Y+f1xn/r++qXqYqZf54.4406*Z+f1xn/r++qXqYqZf54.4406m-Xf-64.6244-Yf-32.0754-Zf-3m-Xf-68.2032-Yf50.65-Zf3m*X+f1xn/r++qXqYqZf44.4211*Y+f1xn/r++qXqYqZf44.4211*Z+f1xn/r++qXqYqZf44.4211m-Xf68.2032-Yf-50.65-Zf-3m-Xf-55.4637-Yf93.2748-Zf3m*X-f1xn/r++qXqYqZf49.7967*Y-f1xn/r++qXqYqZf49.7967*Z-f1xn/r++qXqYqZf49.7967m-Xf55.4637-Yf-93.2748-Zf-3m-Xf-100.225-Yf98.7316-Zf3m*X+f1xn/r++qXqYqZf39.6345*Y+f1xn/r++qXqYqZf39.6345*Z+f1xn/r++qXqYqZf39.6345m-Xf100.225-Yf-98.7316-Zf-3m-Xf-65.8134-Yf108.021-Zf3m*X-f1xn/r++qXqYqZf64.2834*Y-f1xn/r++qXqYqZf64.2834*Z-f1xn/r++qXqYqZf64.2834m-Xf65.8134-Yf-108.021-Zf-3m-Xf37.1028-Yf115.833-Zf3m*X+f1xn/r++qXqYqZf69.9546*Y+f1xn/r++qXqYqZf69.9546*Z+f1xn/r++qXqYqZf69.9546m-Xf-37.1028-Yf-115.833-Zf-3m-Xf0-Yf0-Zf0m+*f0.4508X*f0.892625Y+*f-0.892625X*f0.4508Y_m-Xf-0-Yf-0-Zf0a= abs( sin(X / 12.566370614359172)*cos(Y / 1.5707963267948966) + sin(Y / 1.5707963267948966)*cos(Z /6283.185307179586) + sin(Z / 6283.185307179586)*cos(X / 12.566370614359172)) - 0.49835744842250274;am__f1aa-f-465X-Xf465a-f-690Y-Yf690a-f2Z-Zf4am__f1aa-f-77.5X-Xf77.5a-f-115Y-Yf115a-f2.5Z-Zf3.5a-f2.7Z-Zf3',float('-77.500000'),float('-115.000000'),float('2.700000'),float('77.500000'),float('115.000000'),float('3.000000'))",
                    "name": "out",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                2705.218983374103,
                471.7786356273207
            ],
            "name": "e0",
            "script": [
                "import fab",
                "",
                "title('Extrude')",
                "",
                "input('_x', float)",
                "input('_y', float)",
                "input('zmin', float)",
                "input('zmax', float)",
                "",
                "input('shape', fab.types.Shape)",
                "output('out', fab.shapes.extrude_z(shape, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(_x, _y, zmin), (_x, _y, zmax)], color=sb.color.green)",
                "sb.ui.point(_x, _y, zmin, color=sb.color.green)",
                "sb.ui.point(_x, _y, zmax, color=sb.color.green)",
                "",
                ""
            ],
            "uid": 15
        },
        {
            "datums": [
                {
                    "expr": "art.x",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "art.y",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "art.z",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "art.width-1.5",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "art.height-.25",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "art.depth-2.5",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1aa-f-61.75X-Xf61.75a-f-99.875Y-Yf99.875a-f-2.75Z-Zf-1.25',float('-61.750000'),float('-99.875000'),float('-2.750000'),float('61.750000'),float('99.875000'),float('-1.250000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                4495.026543194784,
                388.2242707387202
            ],
            "name": "backer",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "# Matt Keeter 5/22/15",
                "",
                "import fab",
                "",
                "title('Cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "output('shape', fab.shapes.cube(xmin, xmax, ymin, ymax, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "",
                "def drag_hwd(this, dx,dy,dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2.0, y + height/2.0, z + depth/2.0,",
                "             drag=drag_hwd)",
                "",
                ""
            ],
            "uid": 8
        },
        {
            "datums": [
                {
                    "expr": "backer.x",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "backer.y",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "backer.z",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "backer.width-30",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "backer.height-40",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "backer.depth",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1aa-f-46.75X-Xf46.75a-f-79.875Y-Yf79.875a-f-2.75Z-Zf-1.25',float('-46.750000'),float('-79.875000'),float('-2.750000'),float('46.750000'),float('79.875000'),float('-1.250000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                4428.102153122337,
                883.1036507766974
            ],
            "name": "back_cutout",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "# Matt Keeter 5/22/15",
                "",
                "import fab",
                "",
                "title('Cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "output('shape', fab.shapes.cube(xmin, xmax, ymin, ymax, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "",
                "def drag_hwd(this, dx,dy,dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2.0, y + height/2.0, z + depth/2.0,",
                "             drag=drag_hwd)",
                "",
                ""
            ],
            "uid": 9
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__8.__6]",
                    "name": "a",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__9.__6]",
                    "name": "b",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                },
                {
                    "expr": "\u0012fab.types.Shape('aam__f1aa-f-61.75X-Xf61.75a-f-99.875Y-Yf99.875a-f-2.75Z-Zf-1.25nam__f1aa-f-46.75X-Xf46.75a-f-79.875Y-Yf79.875a-f-2.75Z-Zf-1.25',float('-61.750000'),float('-99.875000'),float('-2.750000'),float('61.750000'),float('99.875000'),float('-1.250000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 2
                }
            ],
            "inspector": [
                4866.697986669341,
                1027.2425759964267
            ],
            "name": "d1",
            "script": [
                "import fab.types",
                "",
                "title('Difference')",
                "input('a', fab.types.Shape)",
                "input('b', fab.types.Shape)",
                "",
                "output('shape', a & ~b)",
                ""
            ],
            "uid": 17
        },
        {
            "datums": [
                {
                    "expr": "backer.x",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "backer.y",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "backer.z+backer.depth/2-self.depth/2",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "backer.width",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "5",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "1",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1aa-f-61.75X-Xf61.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25',float('-61.750000'),float('-2.500000'),float('-2.250000'),float('61.750000'),float('2.500000'),float('-1.250000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                4041.271087077689,
                1287.7777177274806
            ],
            "name": "back_support",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "# Matt Keeter 5/22/15",
                "",
                "import fab",
                "",
                "title('Cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "output('shape', fab.shapes.cube(xmin, xmax, ymin, ymax, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "",
                "def drag_hwd(this, dx,dy,dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2.0, y + height/2.0, z + depth/2.0,",
                "             drag=drag_hwd)",
                "",
                ""
            ],
            "uid": 18
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__18.__6]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "_x",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "_y",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "1",
                    "name": "i",
                    "type": "int",
                    "uid": 3
                },
                {
                    "expr": "math.floor((back_cutout.height/2) / self.dy)+1",
                    "name": "j",
                    "type": "int",
                    "uid": 4
                },
                {
                    "expr": "1",
                    "name": "dx",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "30",
                    "name": "dy",
                    "type": "float",
                    "uid": 6
                },
                {
                    "expr": "\u0012fab.types.Shape('m-Xf0-Yf0-Zf0iim-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-61.75X-Xf61.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25m-Xf0-Yf30-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-61.75X-Xf61.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25m-Xf0-Yf60-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-61.75X-Xf61.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25',float('-61.750000'),float('-2.500000'),float('-2.250000'),float('61.750000'),float('62.500000'),float('-1.250000'))",
                    "name": "array",
                    "type": "_fabtypes.Shape",
                    "uid": 7
                }
            ],
            "inspector": [
                4498.010323556321,
                1282.1643905504739
            ],
            "name": "a2",
            "script": [
                "import fab",
                "",
                "title('Array (2D)')",
                "",
                "input('shape', fab.types.Shape)",
                "input('_x', float)",
                "input('_y', float)",
                "input('i', int)",
                "input('j', int)",
                "input('dx', float)",
                "input('dy', float)",
                "",
                "output('array', fab.shapes.iterate3d(shape, i, j, 1, dx, dy, 0))",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (_x + dx, _y, 0), (_x, _y, 0), (_x, _y + dy, 0)], color=sb.color.teal)",
                "sb.ui.wireframe([",
                "    (_x + dx, _y - 0.3, 0), (_x + dx, _y + 0.3, 0)], color=sb.color.teal)",
                "sb.ui.wireframe([",
                "    (_x + 0.3, _y + dy, 0), (_x - 0.3, _y + dy, 0)], color=sb.color.teal)",
                "",
                "sb.ui.point(_x, _y, 0, color=sb.color.teal)",
                "sb.ui.point(_x + dx, _y, 0, color=sb.color.teal, drag=(dx, None, None))",
                "sb.ui.point(_x, _y + dy, 0, color=sb.color.teal, drag=(None, dy, None))",
                ""
            ],
            "uid": 19
        },
        {
            "datums": [
                {
                    "expr": "body.x",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "body.y+body.height/2-(35/4)-2",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "body.z-body.depth/2",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "body.width/3",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "35/4",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "body.depth/1.25",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1aa-f-25.8333X-Xf25.8333a-f99.875Y-Yf108.625a-f-5.4Z-Zf-0.6',float('-25.833334'),float('99.875000'),float('-5.400000'),float('25.833334'),float('108.625000'),float('-0.600000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                2428.0297096806817,
                928.4032358006973
            ],
            "name": "hanger_slot",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "# Matt Keeter 5/22/15",
                "",
                "import fab",
                "",
                "title('Cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "output('shape', fab.shapes.cube(xmin, xmax, ymin, ymax, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "",
                "def drag_hwd(this, dx,dy,dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2.0, y + height/2.0, z + depth/2.0,",
                "             drag=drag_hwd)",
                "",
                ""
            ],
            "uid": 22
        },
        {
            "datums": [
                {
                    "expr": "hanger_slot.x+self.r",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "hanger_slot.y+hanger_slot.height/2+self.r/3",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "body.z-body.depth/2",
                    "name": "zmin",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "self.zmin+1",
                    "name": "zmax",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "hanger_slot.width/20",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2',float('0.000000'),float('106.902779'),float('-3.000000'),float('5.166667'),float('112.069443'),float('-2.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                2386.0361415143543,
                -1700.660548299134
            ],
            "name": "hanger_notch",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Cylinder (Z)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('zmin', float)",
                "input('zmax', float)",
                "input('r', float)",
                "",
                "output('shape', fab.shapes.cylinder(x, y, zmin, zmax, r))",
                "",
                "# UI",
                "sb.ui.wireframe([(x, y, zmin), (x, y, zmax)])",
                "sb.ui.wireframe([(x, y, zmin), (x+r, y, zmin)])",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmin)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmax)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.point(x, y, zmin)",
                "sb.ui.point(x, y, zmax)",
                "sb.ui.point(x + r, y, zmin, drag=(r, None, None))",
                ""
            ],
            "uid": 23
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__23.__5]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "_x",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "_y",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "math.floor(hanger_slot.width/2/(hanger_notch.r*2))",
                    "name": "i",
                    "type": "int",
                    "uid": 3
                },
                {
                    "expr": "1",
                    "name": "j",
                    "type": "int",
                    "uid": 4
                },
                {
                    "expr": "hanger_notch.r*2",
                    "name": "dx",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "1",
                    "name": "dy",
                    "type": "float",
                    "uid": 6
                },
                {
                    "expr": "\u0012fab.types.Shape('m-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0iiiim-Xf0-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf5.16667-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf10.3333-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf15.5-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf20.6667-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2',float('0.000000'),float('106.902779'),float('-3.000000'),float('25.833366'),float('112.069443'),float('-2.000000'))",
                    "name": "array",
                    "type": "_fabtypes.Shape",
                    "uid": 7
                }
            ],
            "inspector": [
                2848.3688404111126,
                -1735.7986894461847
            ],
            "name": "a3",
            "script": [
                "import fab",
                "",
                "title('Array (2D)')",
                "",
                "input('shape', fab.types.Shape)",
                "input('_x', float)",
                "input('_y', float)",
                "input('i', int)",
                "input('j', int)",
                "input('dx', float)",
                "input('dy', float)",
                "",
                "output('array', fab.shapes.iterate3d(shape, i, j, 1, dx, dy, 0))",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (_x + dx, _y, 0), (_x, _y, 0), (_x, _y + dy, 0)], color=sb.color.teal)",
                "sb.ui.wireframe([",
                "    (_x + dx, _y - 0.3, 0), (_x + dx, _y + 0.3, 0)], color=sb.color.teal)",
                "sb.ui.wireframe([",
                "    (_x + 0.3, _y + dy, 0), (_x - 0.3, _y + dy, 0)], color=sb.color.teal)",
                "",
                "sb.ui.point(_x, _y, 0, color=sb.color.teal)",
                "sb.ui.point(_x + dx, _y, 0, color=sb.color.teal, drag=(dx, None, None))",
                "sb.ui.point(_x, _y + dy, 0, color=sb.color.teal, drag=(None, dy, None))",
                ""
            ],
            "uid": 24
        },
        {
            "datums": [
                {
                    "expr": "body.x+body.width/2-(35/4)-2-back_retainer.width/2",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "body.y-body.height/3.5+20",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "hanger_slot.z",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "hanger_slot.height+back_retainer.width",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "hanger_slot.width+20",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "hanger_slot.depth",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1aa-f58.875X-Xf71.125a-f-81.5476Y-Yf-9.88095a-f-5.4Z-Zf-0.6',float('58.875000'),float('-81.547623'),float('-5.400000'),float('71.125000'),float('-9.880953'),float('-0.600000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                2348.792012966219,
                1398.8964708922865
            ],
            "name": "other_hanger_slot",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "# Matt Keeter 5/22/15",
                "",
                "import fab",
                "",
                "title('Cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "output('shape', fab.shapes.cube(xmin, xmax, ymin, ymax, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "",
                "def drag_hwd(this, dx,dy,dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2.0, y + height/2.0, z + depth/2.0,",
                "             drag=drag_hwd)",
                "",
                ""
            ],
            "uid": 27
        },
        {
            "datums": [
                {
                    "expr": "body.x",
                    "name": "x0",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "_y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "_z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "\u0011[__27.__6]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('im-*f2f0X__am__f1aa-f58.875X-Xf71.125a-f-81.5476Y-Yf-9.88095a-f-5.4Z-Zf-0.6am__f1aa-f58.875X-Xf71.125a-f-81.5476Y-Yf-9.88095a-f-5.4Z-Zf-0.6',float('-71.125000'),float('-81.547623'),float('-5.400000'),float('71.125000'),float('-9.880953'),float('-0.600000'))",
                    "name": "reflected",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                2838.139403473214,
                1395.3210541034953
            ],
            "name": "m2",
            "script": [
                "import fab",
                "",
                "title('Mirror (X)')",
                "",
                "input('x0', float)",
                "input('_y', float)",
                "input('_z', float)",
                "",
                "input('shape', fab.types.Shape)",
                "output('reflected', fab.shapes.reflect_x(shape, x0) | shape)",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (x0, _y - 1, _z + 1),",
                "    (x0, _y + 1, _z + 1),",
                "    (x0, _y + 1, _z - 1),",
                "    (x0, _y - 1, _z - 1)], color=sb.color.teal, close=True)",
                "",
                "sb.ui.point(x0, _y, _z, color=sb.color.teal)",
                ""
            ],
            "uid": 28
        },
        {
            "datums": [
                {
                    "expr": "0.0",
                    "name": "_x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "body.y",
                    "name": "y0",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "_z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "\u0011[__28.__4]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('im_-*f2f0Y_im-*f2f0X__am__f1aa-f58.875X-Xf71.125a-f-81.5476Y-Yf-9.88095a-f-5.4Z-Zf-0.6am__f1aa-f58.875X-Xf71.125a-f-81.5476Y-Yf-9.88095a-f-5.4Z-Zf-0.6im-*f2f0X__am__f1aa-f58.875X-Xf71.125a-f-81.5476Y-Yf-9.88095a-f-5.4Z-Zf-0.6am__f1aa-f58.875X-Xf71.125a-f-81.5476Y-Yf-9.88095a-f-5.4Z-Zf-0.6',float('-71.125000'),float('-81.547623'),float('-5.400000'),float('71.125000'),float('81.547623'),float('-0.600000'))",
                    "name": "reflected",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                3216.937666593565,
                1395.1643399368425
            ],
            "name": "m4",
            "script": [
                "import fab",
                "",
                "title('Mirror (Y)')",
                "",
                "input('_x', float)",
                "input('y0', float)",
                "input('_z', float)",
                "",
                "input('shape', fab.types.Shape)",
                "output('reflected', fab.shapes.reflect_y(shape, y0) | shape)",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (_x - 1, y0, _z + 1),",
                "    (_x + 1, y0, _z + 1),",
                "    (_x + 1, y0, _z - 1),",
                "    (_x - 1, y0, _z - 1)], color=sb.color.teal, close=True)",
                "",
                "sb.ui.point(_x, y0, _z, color=sb.color.teal)",
                "",
                ""
            ],
            "uid": 32
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__44.__4]",
                    "name": "a",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__42.__2]",
                    "name": "b",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                },
                {
                    "expr": "\u0012fab.types.Shape('iim-*f2f0X__m-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0iiiim-Xf0-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf5.16667-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf10.3333-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf15.5-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf20.6667-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0iiiim-Xf0-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf5.16667-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf10.3333-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf15.5-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf20.6667-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2aiim-*f2f0X__am__f1aa-f-64.25X-Xf-60.75a-f-100Y-Yf100a-f-3Z-Zf-1.5am__f1aa-f-64.25X-Xf-60.75a-f-100Y-Yf100a-f-3Z-Zf-1.5aiiiiiiiiiiiiiiiiiiiiiam__f1aa-f-76X-Xf76a-f-113.5Y-Yf113.5a-f-3Z-Zf3am__f1iaa-f-77.5X-Xf77.5a-f-113.5Y-Yf113.5aa-f-76X-Xf76a-f-115Y-Yf115a-f-1.5Z-Zf1.5-r++q-Xf76q-Yf113.5q-Zf1.5f1.5-r++q-Xf-76q-Yf113.5q-Zf1.5f1.5-r++q-Xf76q-Yf-113.5q-Zf1.5f1.5-r++q-Xf-76q-Yf-113.5q-Zf1.5f1.5-r++q-Xf76q-Yf113.5q-Zf-1.5f1.5-r++q-Xf-76q-Yf113.5q-Zf-1.5f1.5-r++q-Xf76q-Yf-113.5q-Zf-1.5f1.5-r++q-Xf-76q-Yf-113.5q-Zf-1.5f1.5am__f1-r+q-Xf76q-Yf113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf113.5q-Zf1.5f1.5a-f-76X-Xf76a-r+q-Xf76q-Zf1.5f1.5a-f-113.5Y-Yf113.5am__f1-r+q-Xf-76q-Yf113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf-113.5q-Zf1.5f1.5a-f-76X-Xf76a-r+q-Xf-76q-Zf1.5f1.5a-f-113.5Y-Yf113.5am__f1-r+q-Xf76q-Yf-113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf113.5q-Zf-1.5f1.5a-f-76X-Xf76a-r+q-Xf76q-Zf-1.5f1.5a-f-113.5Y-Yf113.5am__f1-r+q-Xf-76q-Yf-113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf-113.5q-Zf-1.5f1.5a-f-76X-Xf76a-r+q-Xf-76q-Zf-1.5f1.5a-f-113.5Y-Yf113.5niiim-*f2f-40.5X__am__f1m-Xf-40.5-Yf-110.5-Zf0m+f0/-Xf0f7+f0/-Yf0f7_m-Xf0-Yf1-Zf0iiim-Xf0-Yf-1-Zf0iaa-r+q-Xf0.275q-Yf0.275f0.275n-r+q-Xf0.275q-Yf0.275f0.175aa-f0X-Xf0.55a-f0Y-Yf0.275aa-f0.45X-Xf0.55a-f0.275Y-Yf1m-Xf0.65-Yf-1-Zf0-r+q-Xf0.075q-Yf0.075f0.075m-Xf0.9-Yf-1-Zf0iaa-r+q-Xf0.1q-Yf0.5f0.5n-r+q-Xf0.1q-Yf0.5f0.4aa-f0X-Xf1a-f0Y-Yf1aa-f0X-Xf0.1a-f0Y-Yf1m-Xf1.6-Yf-1-Zf0-r+q-Xf0.075q-Yf0.075f0.075a-f-3Z-Zf-2am__f1mXYf3am-Xf-53.6899-Yf99.4873-Zf3m*X+f1xn/r++qXqYqZf30.981*Y+f1xn/r++qXqYqZf30.981*Z+f1xn/r++qXqYqZf30.981m-Xf53.6899-Yf-99.4873-Zf-3m-Xf66.8454-Yf-113.805-Zf3m*X-f1xn/r++qXqYqZf53.409*Y-f1xn/r++qXqYqZf53.409*Z-f1xn/r++qXqYqZf53.409m-Xf-66.8454-Yf113.805-Zf-3m-Xf-34.5161-Yf111.997-Zf3m*X-f1xn/r++qXqYqZf54.5185*Y-f1xn/r++qXqYqZf54.5185*Z-f1xn/r++qXqYqZf54.5185m-Xf34.5161-Yf-111.997-Zf-3m-Xf60.5453-Yf100.024-Zf3m*X-f1xn/r++qXqYqZf42.744*Y-f1xn/r++qXqYqZf42.744*Z-f1xn/r++qXqYqZf42.744m-Xf-60.5453-Yf-100.024-Zf-3m-Xf-96.9284-Yf-91.4742-Zf3m*X-f1xn/r++qXqYqZf65.0745*Y-f1xn/r++qXqYqZf65.0745*Z-f1xn/r++qXqYqZf65.0745m-Xf96.9284-Yf91.4742-Zf-3m-Xf-60.6143-Yf-91.1166-Zf3m*X+f1xn/r++qXqYqZf39.9971*Y+f1xn/r++qXqYqZf39.9971*Z+f1xn/r++qXqYqZf39.9971m-Xf60.6143-Yf91.1166-Zf-3m-Xf-43.8976-Yf-115.104-Zf3m*X-f1xn/r++qXqYqZf29.3708*Y-f1xn/r++qXqYqZf29.3708*Z-f1xn/r++qXqYqZf29.3708m-Xf43.8976-Yf115.104-Zf-3m-Xf64.6244-Yf32.0754-Zf3m*X+f1xn/r++qXqYqZf54.4406*Y+f1xn/r++qXqYqZf54.4406*Z+f1xn/r++qXqYqZf54.4406m-Xf-64.6244-Yf-32.0754-Zf-3m-Xf-68.2032-Yf50.65-Zf3m*X+f1xn/r++qXqYqZf44.4211*Y+f1xn/r++qXqYqZf44.4211*Z+f1xn/r++qXqYqZf44.4211m-Xf68.2032-Yf-50.65-Zf-3m-Xf-55.4637-Yf93.2748-Zf3m*X-f1xn/r++qXqYqZf49.7967*Y-f1xn/r++qXqYqZf49.7967*Z-f1xn/r++qXqYqZf49.7967m-Xf55.4637-Yf-93.2748-Zf-3m-Xf-100.225-Yf98.7316-Zf3m*X+f1xn/r++qXqYqZf39.6345*Y+f1xn/r++qXqYqZf39.6345*Z+f1xn/r++qXqYqZf39.6345m-Xf100.225-Yf-98.7316-Zf-3m-Xf-65.8134-Yf108.021-Zf3m*X-f1xn/r++qXqYqZf64.2834*Y-f1xn/r++qXqYqZf64.2834*Z-f1xn/r++qXqYqZf64.2834m-Xf65.8134-Yf-108.021-Zf-3m-Xf37.1028-Yf115.833-Zf3m*X+f1xn/r++qXqYqZf69.9546*Y+f1xn/r++qXqYqZf69.9546*Z+f1xn/r++qXqYqZf69.9546m-Xf-37.1028-Yf-115.833-Zf-3m-Xf0-Yf0-Zf0m+*f0.4508X*f0.892625Y+*f-0.892625X*f0.4508Y_m-Xf-0-Yf-0-Zf0a= abs( sin(X / 12.566370614359172)*cos(Y / 1.5707963267948966) + sin(Y / 1.5707963267948966)*cos(Z /6283.185307179586) + sin(Z / 6283.185307179586)*cos(X / 12.566370614359172)) - 0.49835744842250274;am__f1aa-f-465X-Xf465a-f-690Y-Yf690a-f2Z-Zf4am__f1aa-f-77.5X-Xf77.5a-f-115Y-Yf115a-f2.5Z-Zf3.5a-f2.7Z-Zf3am__f1aa-f-59.5X-Xf59.5a-f-97Y-Yf97a-f-3Z-Zf3am__f1aa-f-62.5X-Xf62.5a-f-100Y-Yf100a-f-4Z-Zf0niam__f1aa-f-25.8333X-Xf25.8333a-f99.875Y-Yf108.625a-f-5.4Z-Zf-0.6im_-*f2f0Y_im-*f2f0X__am__f1aa-f58.875X-Xf71.125a-f-81.5476Y-Yf-9.88095a-f-5.4Z-Zf-0.6am__f1aa-f58.875X-Xf71.125a-f-81.5476Y-Yf-9.88095a-f-5.4Z-Zf-0.6im-*f2f0X__am__f1aa-f58.875X-Xf71.125a-f-81.5476Y-Yf-9.88095a-f-5.4Z-Zf-0.6am__f1aa-f58.875X-Xf71.125a-f-81.5476Y-Yf-9.88095a-f-5.4Z-Zf-0.6',float('-77.500000'),float('-115.000000'),float('-3.000000'),float('77.500000'),float('115.000000'),float('3.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 2
                }
            ],
            "inspector": [
                4093.1092512656087,
                -183.60702246288386
            ],
            "name": "u0",
            "script": [
                "import fab.types",
                "",
                "title('Union')",
                "input('a', fab.types.Shape)",
                "input('b', fab.types.Shape)",
                "",
                "output('shape', a | b)",
                ""
            ],
            "uid": 34
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__34.__2]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0012fab.types.Shape('iim-*f2f0X__m-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0iiiim-Xf0-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf5.16667-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf10.3333-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf15.5-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf20.6667-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0iiiim-Xf0-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf5.16667-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf10.3333-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf15.5-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf20.6667-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2aiim-*f2f0X__am__f1aa-f-64.25X-Xf-60.75a-f-100Y-Yf100a-f-3Z-Zf-1.5am__f1aa-f-64.25X-Xf-60.75a-f-100Y-Yf100a-f-3Z-Zf-1.5aiiiiiiiiiiiiiiiiiiiiiam__f1aa-f-76X-Xf76a-f-113.5Y-Yf113.5a-f-3Z-Zf3am__f1iaa-f-77.5X-Xf77.5a-f-113.5Y-Yf113.5aa-f-76X-Xf76a-f-115Y-Yf115a-f-1.5Z-Zf1.5-r++q-Xf76q-Yf113.5q-Zf1.5f1.5-r++q-Xf-76q-Yf113.5q-Zf1.5f1.5-r++q-Xf76q-Yf-113.5q-Zf1.5f1.5-r++q-Xf-76q-Yf-113.5q-Zf1.5f1.5-r++q-Xf76q-Yf113.5q-Zf-1.5f1.5-r++q-Xf-76q-Yf113.5q-Zf-1.5f1.5-r++q-Xf76q-Yf-113.5q-Zf-1.5f1.5-r++q-Xf-76q-Yf-113.5q-Zf-1.5f1.5am__f1-r+q-Xf76q-Yf113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf113.5q-Zf1.5f1.5a-f-76X-Xf76a-r+q-Xf76q-Zf1.5f1.5a-f-113.5Y-Yf113.5am__f1-r+q-Xf-76q-Yf113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf-113.5q-Zf1.5f1.5a-f-76X-Xf76a-r+q-Xf-76q-Zf1.5f1.5a-f-113.5Y-Yf113.5am__f1-r+q-Xf76q-Yf-113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf113.5q-Zf-1.5f1.5a-f-76X-Xf76a-r+q-Xf76q-Zf-1.5f1.5a-f-113.5Y-Yf113.5am__f1-r+q-Xf-76q-Yf-113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf-113.5q-Zf-1.5f1.5a-f-76X-Xf76a-r+q-Xf-76q-Zf-1.5f1.5a-f-113.5Y-Yf113.5niiim-*f2f-40.5X__am__f1m-Xf-40.5-Yf-110.5-Zf0m+f0/-Xf0f7+f0/-Yf0f7_m-Xf0-Yf1-Zf0iiim-Xf0-Yf-1-Zf0iaa-r+q-Xf0.275q-Yf0.275f0.275n-r+q-Xf0.275q-Yf0.275f0.175aa-f0X-Xf0.55a-f0Y-Yf0.275aa-f0.45X-Xf0.55a-f0.275Y-Yf1m-Xf0.65-Yf-1-Zf0-r+q-Xf0.075q-Yf0.075f0.075m-Xf0.9-Yf-1-Zf0iaa-r+q-Xf0.1q-Yf0.5f0.5n-r+q-Xf0.1q-Yf0.5f0.4aa-f0X-Xf1a-f0Y-Yf1aa-f0X-Xf0.1a-f0Y-Yf1m-Xf1.6-Yf-1-Zf0-r+q-Xf0.075q-Yf0.075f0.075a-f-3Z-Zf-2am__f1mXYf3am-Xf-53.6899-Yf99.4873-Zf3m*X+f1xn/r++qXqYqZf30.981*Y+f1xn/r++qXqYqZf30.981*Z+f1xn/r++qXqYqZf30.981m-Xf53.6899-Yf-99.4873-Zf-3m-Xf66.8454-Yf-113.805-Zf3m*X-f1xn/r++qXqYqZf53.409*Y-f1xn/r++qXqYqZf53.409*Z-f1xn/r++qXqYqZf53.409m-Xf-66.8454-Yf113.805-Zf-3m-Xf-34.5161-Yf111.997-Zf3m*X-f1xn/r++qXqYqZf54.5185*Y-f1xn/r++qXqYqZf54.5185*Z-f1xn/r++qXqYqZf54.5185m-Xf34.5161-Yf-111.997-Zf-3m-Xf60.5453-Yf100.024-Zf3m*X-f1xn/r++qXqYqZf42.744*Y-f1xn/r++qXqYqZf42.744*Z-f1xn/r++qXqYqZf42.744m-Xf-60.5453-Yf-100.024-Zf-3m-Xf-96.9284-Yf-91.4742-Zf3m*X-f1xn/r++qXqYqZf65.0745*Y-f1xn/r++qXqYqZf65.0745*Z-f1xn/r++qXqYqZf65.0745m-Xf96.9284-Yf91.4742-Zf-3m-Xf-60.6143-Yf-91.1166-Zf3m*X+f1xn/r++qXqYqZf39.9971*Y+f1xn/r++qXqYqZf39.9971*Z+f1xn/r++qXqYqZf39.9971m-Xf60.6143-Yf91.1166-Zf-3m-Xf-43.8976-Yf-115.104-Zf3m*X-f1xn/r++qXqYqZf29.3708*Y-f1xn/r++qXqYqZf29.3708*Z-f1xn/r++qXqYqZf29.3708m-Xf43.8976-Yf115.104-Zf-3m-Xf64.6244-Yf32.0754-Zf3m*X+f1xn/r++qXqYqZf54.4406*Y+f1xn/r++qXqYqZf54.4406*Z+f1xn/r++qXqYqZf54.4406m-Xf-64.6244-Yf-32.0754-Zf-3m-Xf-68.2032-Yf50.65-Zf3m*X+f1xn/r++qXqYqZf44.4211*Y+f1xn/r++qXqYqZf44.4211*Z+f1xn/r++qXqYqZf44.4211m-Xf68.2032-Yf-50.65-Zf-3m-Xf-55.4637-Yf93.2748-Zf3m*X-f1xn/r++qXqYqZf49.7967*Y-f1xn/r++qXqYqZf49.7967*Z-f1xn/r++qXqYqZf49.7967m-Xf55.4637-Yf-93.2748-Zf-3m-Xf-100.225-Yf98.7316-Zf3m*X+f1xn/r++qXqYqZf39.6345*Y+f1xn/r++qXqYqZf39.6345*Z+f1xn/r++qXqYqZf39.6345m-Xf100.225-Yf-98.7316-Zf-3m-Xf-65.8134-Yf108.021-Zf3m*X-f1xn/r++qXqYqZf64.2834*Y-f1xn/r++qXqYqZf64.2834*Z-f1xn/r++qXqYqZf64.2834m-Xf65.8134-Yf-108.021-Zf-3m-Xf37.1028-Yf115.833-Zf3m*X+f1xn/r++qXqYqZf69.9546*Y+f1xn/r++qXqYqZf69.9546*Z+f1xn/r++qXqYqZf69.9546m-Xf-37.1028-Yf-115.833-Zf-3m-Xf0-Yf0-Zf0m+*f0.4508X*f0.892625Y+*f-0.892625X*f0.4508Y_m-Xf-0-Yf-0-Zf0a= abs( sin(X / 12.566370614359172)*cos(Y / 1.5707963267948966) + sin(Y / 1.5707963267948966)*cos(Z /6283.185307179586) + sin(Z / 6283.185307179586)*cos(X / 12.566370614359172)) - 0.49835744842250274;am__f1aa-f-465X-Xf465a-f-690Y-Yf690a-f2Z-Zf4am__f1aa-f-77.5X-Xf77.5a-f-115Y-Yf115a-f2.5Z-Zf3.5a-f2.7Z-Zf3am__f1aa-f-59.5X-Xf59.5a-f-97Y-Yf97a-f-3Z-Zf3am__f1aa-f-62.5X-Xf62.5a-f-100Y-Yf100a-f-4Z-Zf0niam__f1aa-f-25.8333X-Xf25.8333a-f99.875Y-Yf108.625a-f-5.4Z-Zf-0.6im_-*f2f0Y_im-*f2f0X__am__f1aa-f58.875X-Xf71.125a-f-81.5476Y-Yf-9.88095a-f-5.4Z-Zf-0.6am__f1aa-f58.875X-Xf71.125a-f-81.5476Y-Yf-9.88095a-f-5.4Z-Zf-0.6im-*f2f0X__am__f1aa-f58.875X-Xf71.125a-f-81.5476Y-Yf-9.88095a-f-5.4Z-Zf-0.6am__f1aa-f58.875X-Xf71.125a-f-81.5476Y-Yf-9.88095a-f-5.4Z-Zf-0.6',float('-77.500000'),float('-115.000000'),float('-3.000000'),float('77.500000'),float('115.000000'),float('3.000000'))",
                    "name": "out",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                }
            ],
            "inspector": [
                4473.419295099518,
                -161.38714472582856
            ],
            "name": "frame_outer",
            "script": [
                "import fab",
                "",
                "title('Mesh (.stl)')",
                "",
                "input('shape', fab.types.Shape)",
                "output('out', shape)",
                "",
                "sb.export.stl(shape)",
                ""
            ],
            "uid": 35
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__43.__4,__17.__2]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0012fab.types.Shape('iim_-*f2f0Y_m-Xf0-Yf0-Zf0iim-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-61.75X-Xf61.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25m-Xf0-Yf30-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-61.75X-Xf61.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25m-Xf0-Yf60-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-61.75X-Xf61.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25m-Xf0-Yf0-Zf0iim-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-61.75X-Xf61.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25m-Xf0-Yf30-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-61.75X-Xf61.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25m-Xf0-Yf60-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-61.75X-Xf61.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25aam__f1aa-f-61.75X-Xf61.75a-f-99.875Y-Yf99.875a-f-2.75Z-Zf-1.25nam__f1aa-f-46.75X-Xf46.75a-f-79.875Y-Yf79.875a-f-2.75Z-Zf-1.25',float('-61.750000'),float('-99.875000'),float('-2.750000'),float('61.750000'),float('99.875000'),float('-1.250000'))",
                    "name": "out",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                }
            ],
            "inspector": [
                5263.548836081155,
                1208.5836698175349
            ],
            "name": "frame_inner",
            "script": [
                "import fab",
                "",
                "title('Mesh (.stl)')",
                "",
                "input('shape', fab.types.Shape)",
                "output('out', shape)",
                "",
                "sb.export.stl(shape)",
                ""
            ],
            "uid": 36
        },
        {
            "datums": [
                {
                    "expr": "art.x-art.width/2",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "art.y",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "body.z-body.depth/2+self.depth/2",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "3.5",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "art.height",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "1.5",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1aa-f-64.25X-Xf-60.75a-f-100Y-Yf100a-f-3Z-Zf-1.5',float('-64.250000'),float('-100.000000'),float('-3.000000'),float('-60.750000'),float('100.000000'),float('-1.500000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                2794.195584507498,
                -1042.8650233164858
            ],
            "name": "back_retainer",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "# Matt Keeter 5/22/15",
                "",
                "import fab",
                "",
                "title('Cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "output('shape', fab.shapes.cube(xmin, xmax, ymin, ymax, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "",
                "def drag_hwd(this, dx,dy,dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2.0, y + height/2.0, z + depth/2.0,",
                "             drag=drag_hwd)",
                "",
                ""
            ],
            "uid": 37
        },
        {
            "datums": [
                {
                    "expr": "art.x",
                    "name": "x0",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "_y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "_z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "\u0011[__37.__6]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('im-*f2f0X__am__f1aa-f-64.25X-Xf-60.75a-f-100Y-Yf100a-f-3Z-Zf-1.5am__f1aa-f-64.25X-Xf-60.75a-f-100Y-Yf100a-f-3Z-Zf-1.5',float('-64.250000'),float('-100.000000'),float('-3.000000'),float('64.250000'),float('100.000000'),float('-1.500000'))",
                    "name": "reflected",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                3224.269157129408,
                -865.3918570255956
            ],
            "name": "m8",
            "script": [
                "import fab",
                "",
                "title('Mirror (X)')",
                "",
                "input('x0', float)",
                "input('_y', float)",
                "input('_z', float)",
                "",
                "input('shape', fab.types.Shape)",
                "output('reflected', fab.shapes.reflect_x(shape, x0) | shape)",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (x0, _y - 1, _z + 1),",
                "    (x0, _y + 1, _z + 1),",
                "    (x0, _y + 1, _z - 1),",
                "    (x0, _y - 1, _z - 1)], color=sb.color.teal, close=True)",
                "",
                "sb.ui.point(x0, _y, _z, color=sb.color.teal)",
                ""
            ],
            "uid": 41
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__41.__4,__3.__2]",
                    "name": "a",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__22.__6,__32.__4]",
                    "name": "b",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                },
                {
                    "expr": "\u0012fab.types.Shape('aiim-*f2f0X__am__f1aa-f-64.25X-Xf-60.75a-f-100Y-Yf100a-f-3Z-Zf-1.5am__f1aa-f-64.25X-Xf-60.75a-f-100Y-Yf100a-f-3Z-Zf-1.5aiiiiiiiiiiiiiiiiiiiiiam__f1aa-f-76X-Xf76a-f-113.5Y-Yf113.5a-f-3Z-Zf3am__f1iaa-f-77.5X-Xf77.5a-f-113.5Y-Yf113.5aa-f-76X-Xf76a-f-115Y-Yf115a-f-1.5Z-Zf1.5-r++q-Xf76q-Yf113.5q-Zf1.5f1.5-r++q-Xf-76q-Yf113.5q-Zf1.5f1.5-r++q-Xf76q-Yf-113.5q-Zf1.5f1.5-r++q-Xf-76q-Yf-113.5q-Zf1.5f1.5-r++q-Xf76q-Yf113.5q-Zf-1.5f1.5-r++q-Xf-76q-Yf113.5q-Zf-1.5f1.5-r++q-Xf76q-Yf-113.5q-Zf-1.5f1.5-r++q-Xf-76q-Yf-113.5q-Zf-1.5f1.5am__f1-r+q-Xf76q-Yf113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf113.5q-Zf1.5f1.5a-f-76X-Xf76a-r+q-Xf76q-Zf1.5f1.5a-f-113.5Y-Yf113.5am__f1-r+q-Xf-76q-Yf113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf-113.5q-Zf1.5f1.5a-f-76X-Xf76a-r+q-Xf-76q-Zf1.5f1.5a-f-113.5Y-Yf113.5am__f1-r+q-Xf76q-Yf-113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf113.5q-Zf-1.5f1.5a-f-76X-Xf76a-r+q-Xf76q-Zf-1.5f1.5a-f-113.5Y-Yf113.5am__f1-r+q-Xf-76q-Yf-113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf-113.5q-Zf-1.5f1.5a-f-76X-Xf76a-r+q-Xf-76q-Zf-1.5f1.5a-f-113.5Y-Yf113.5niiim-*f2f-40.5X__am__f1m-Xf-40.5-Yf-110.5-Zf0m+f0/-Xf0f7+f0/-Yf0f7_m-Xf0-Yf1-Zf0iiim-Xf0-Yf-1-Zf0iaa-r+q-Xf0.275q-Yf0.275f0.275n-r+q-Xf0.275q-Yf0.275f0.175aa-f0X-Xf0.55a-f0Y-Yf0.275aa-f0.45X-Xf0.55a-f0.275Y-Yf1m-Xf0.65-Yf-1-Zf0-r+q-Xf0.075q-Yf0.075f0.075m-Xf0.9-Yf-1-Zf0iaa-r+q-Xf0.1q-Yf0.5f0.5n-r+q-Xf0.1q-Yf0.5f0.4aa-f0X-Xf1a-f0Y-Yf1aa-f0X-Xf0.1a-f0Y-Yf1m-Xf1.6-Yf-1-Zf0-r+q-Xf0.075q-Yf0.075f0.075a-f-3Z-Zf-2am__f1mXYf3am-Xf-53.6899-Yf99.4873-Zf3m*X+f1xn/r++qXqYqZf30.981*Y+f1xn/r++qXqYqZf30.981*Z+f1xn/r++qXqYqZf30.981m-Xf53.6899-Yf-99.4873-Zf-3m-Xf66.8454-Yf-113.805-Zf3m*X-f1xn/r++qXqYqZf53.409*Y-f1xn/r++qXqYqZf53.409*Z-f1xn/r++qXqYqZf53.409m-Xf-66.8454-Yf113.805-Zf-3m-Xf-34.5161-Yf111.997-Zf3m*X-f1xn/r++qXqYqZf54.5185*Y-f1xn/r++qXqYqZf54.5185*Z-f1xn/r++qXqYqZf54.5185m-Xf34.5161-Yf-111.997-Zf-3m-Xf60.5453-Yf100.024-Zf3m*X-f1xn/r++qXqYqZf42.744*Y-f1xn/r++qXqYqZf42.744*Z-f1xn/r++qXqYqZf42.744m-Xf-60.5453-Yf-100.024-Zf-3m-Xf-96.9284-Yf-91.4742-Zf3m*X-f1xn/r++qXqYqZf65.0745*Y-f1xn/r++qXqYqZf65.0745*Z-f1xn/r++qXqYqZf65.0745m-Xf96.9284-Yf91.4742-Zf-3m-Xf-60.6143-Yf-91.1166-Zf3m*X+f1xn/r++qXqYqZf39.9971*Y+f1xn/r++qXqYqZf39.9971*Z+f1xn/r++qXqYqZf39.9971m-Xf60.6143-Yf91.1166-Zf-3m-Xf-43.8976-Yf-115.104-Zf3m*X-f1xn/r++qXqYqZf29.3708*Y-f1xn/r++qXqYqZf29.3708*Z-f1xn/r++qXqYqZf29.3708m-Xf43.8976-Yf115.104-Zf-3m-Xf64.6244-Yf32.0754-Zf3m*X+f1xn/r++qXqYqZf54.4406*Y+f1xn/r++qXqYqZf54.4406*Z+f1xn/r++qXqYqZf54.4406m-Xf-64.6244-Yf-32.0754-Zf-3m-Xf-68.2032-Yf50.65-Zf3m*X+f1xn/r++qXqYqZf44.4211*Y+f1xn/r++qXqYqZf44.4211*Z+f1xn/r++qXqYqZf44.4211m-Xf68.2032-Yf-50.65-Zf-3m-Xf-55.4637-Yf93.2748-Zf3m*X-f1xn/r++qXqYqZf49.7967*Y-f1xn/r++qXqYqZf49.7967*Z-f1xn/r++qXqYqZf49.7967m-Xf55.4637-Yf-93.2748-Zf-3m-Xf-100.225-Yf98.7316-Zf3m*X+f1xn/r++qXqYqZf39.6345*Y+f1xn/r++qXqYqZf39.6345*Z+f1xn/r++qXqYqZf39.6345m-Xf100.225-Yf-98.7316-Zf-3m-Xf-65.8134-Yf108.021-Zf3m*X-f1xn/r++qXqYqZf64.2834*Y-f1xn/r++qXqYqZf64.2834*Z-f1xn/r++qXqYqZf64.2834m-Xf65.8134-Yf-108.021-Zf-3m-Xf37.1028-Yf115.833-Zf3m*X+f1xn/r++qXqYqZf69.9546*Y+f1xn/r++qXqYqZf69.9546*Z+f1xn/r++qXqYqZf69.9546m-Xf-37.1028-Yf-115.833-Zf-3m-Xf0-Yf0-Zf0m+*f0.4508X*f0.892625Y+*f-0.892625X*f0.4508Y_m-Xf-0-Yf-0-Zf0a= abs( sin(X / 12.566370614359172)*cos(Y / 1.5707963267948966) + sin(Y / 1.5707963267948966)*cos(Z /6283.185307179586) + sin(Z / 6283.185307179586)*cos(X / 12.566370614359172)) - 0.49835744842250274;am__f1aa-f-465X-Xf465a-f-690Y-Yf690a-f2Z-Zf4am__f1aa-f-77.5X-Xf77.5a-f-115Y-Yf115a-f2.5Z-Zf3.5a-f2.7Z-Zf3am__f1aa-f-59.5X-Xf59.5a-f-97Y-Yf97a-f-3Z-Zf3am__f1aa-f-62.5X-Xf62.5a-f-100Y-Yf100a-f-4Z-Zf0niam__f1aa-f-25.8333X-Xf25.8333a-f99.875Y-Yf108.625a-f-5.4Z-Zf-0.6im_-*f2f0Y_im-*f2f0X__am__f1aa-f58.875X-Xf71.125a-f-81.5476Y-Yf-9.88095a-f-5.4Z-Zf-0.6am__f1aa-f58.875X-Xf71.125a-f-81.5476Y-Yf-9.88095a-f-5.4Z-Zf-0.6im-*f2f0X__am__f1aa-f58.875X-Xf71.125a-f-81.5476Y-Yf-9.88095a-f-5.4Z-Zf-0.6am__f1aa-f58.875X-Xf71.125a-f-81.5476Y-Yf-9.88095a-f-5.4Z-Zf-0.6',float('-77.500000'),float('-115.000000'),float('-3.000000'),float('77.500000'),float('115.000000'),float('3.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 2
                }
            ],
            "inspector": [
                3701.7567999327525,
                787.8789865012938
            ],
            "name": "d3",
            "script": [
                "import fab.types",
                "",
                "title('Difference')",
                "input('a', fab.types.Shape)",
                "input('b', fab.types.Shape)",
                "",
                "output('shape', a & ~b)",
                ""
            ],
            "uid": 42
        },
        {
            "datums": [
                {
                    "expr": "0.0",
                    "name": "_x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "backer.y",
                    "name": "y0",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "_z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "\u0011[__19.__7]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('im_-*f2f0Y_m-Xf0-Yf0-Zf0iim-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-61.75X-Xf61.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25m-Xf0-Yf30-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-61.75X-Xf61.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25m-Xf0-Yf60-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-61.75X-Xf61.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25m-Xf0-Yf0-Zf0iim-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-61.75X-Xf61.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25m-Xf0-Yf30-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-61.75X-Xf61.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25m-Xf0-Yf60-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-61.75X-Xf61.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25',float('-61.750000'),float('-62.500000'),float('-2.250000'),float('61.750000'),float('62.500000'),float('-1.250000'))",
                    "name": "reflected",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                4853.0947568664515,
                1281.9456113241345
            ],
            "name": "m9",
            "script": [
                "import fab",
                "",
                "title('Mirror (Y)')",
                "",
                "input('_x', float)",
                "input('y0', float)",
                "input('_z', float)",
                "",
                "input('shape', fab.types.Shape)",
                "output('reflected', fab.shapes.reflect_y(shape, y0) | shape)",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (_x - 1, y0, _z + 1),",
                "    (_x + 1, y0, _z + 1),",
                "    (_x + 1, y0, _z - 1),",
                "    (_x - 1, y0, _z - 1)], color=sb.color.teal, close=True)",
                "",
                "sb.ui.point(_x, y0, _z, color=sb.color.teal)",
                "",
                ""
            ],
            "uid": 43
        },
        {
            "datums": [
                {
                    "expr": "hanger_slot.x",
                    "name": "x0",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "_y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "_z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "\u0011[__24.__7]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('im-*f2f0X__m-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0iiiim-Xf0-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf5.16667-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf10.3333-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf15.5-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf20.6667-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0iiiim-Xf0-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf5.16667-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf10.3333-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf15.5-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2m-Xf20.6667-Yf0-Zf0am__f1-r+q-Xf2.58333q-Yf109.486f2.58333a-f-3Z-Zf-2',float('-25.833366'),float('106.902779'),float('-3.000000'),float('25.833366'),float('112.069443'),float('-2.000000'))",
                    "name": "reflected",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                3211.5502578766054,
                -1473.5888085659726
            ],
            "name": "m10",
            "script": [
                "import fab",
                "",
                "title('Mirror (X)')",
                "",
                "input('x0', float)",
                "input('_y', float)",
                "input('_z', float)",
                "",
                "input('shape', fab.types.Shape)",
                "output('reflected', fab.shapes.reflect_x(shape, x0) | shape)",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (x0, _y - 1, _z + 1),",
                "    (x0, _y + 1, _z + 1),",
                "    (x0, _y + 1, _z - 1),",
                "    (x0, _y - 1, _z - 1)], color=sb.color.teal, close=True)",
                "",
                "sb.ui.point(x0, _y, _z, color=sb.color.teal)",
                ""
            ],
            "uid": 44
        },
        {
            "datums": [
                {
                    "expr": "1875",
                    "name": "serial",
                    "type": "float",
                    "uid": 6
                },
                {
                    "expr": "body.x",
                    "name": "x",
                    "type": "float",
                    "uid": 7
                },
                {
                    "expr": "body.y",
                    "name": "y",
                    "type": "float",
                    "uid": 8
                },
                {
                    "expr": "body.z+body.depth/2",
                    "name": "z",
                    "type": "float",
                    "uid": 9
                },
                {
                    "expr": "body.width",
                    "name": "width",
                    "type": "float",
                    "uid": 11
                },
                {
                    "expr": "body.height",
                    "name": "height",
                    "type": "float",
                    "uid": 12
                },
                {
                    "expr": "1",
                    "name": "depth",
                    "type": "float",
                    "uid": 13
                },
                {
                    "expr": "\u0012fab.types.Shape('mXYf3am-Xf-53.6899-Yf99.4873-Zf3m*X+f1xn/r++qXqYqZf30.981*Y+f1xn/r++qXqYqZf30.981*Z+f1xn/r++qXqYqZf30.981m-Xf53.6899-Yf-99.4873-Zf-3m-Xf66.8454-Yf-113.805-Zf3m*X-f1xn/r++qXqYqZf53.409*Y-f1xn/r++qXqYqZf53.409*Z-f1xn/r++qXqYqZf53.409m-Xf-66.8454-Yf113.805-Zf-3m-Xf-34.5161-Yf111.997-Zf3m*X-f1xn/r++qXqYqZf54.5185*Y-f1xn/r++qXqYqZf54.5185*Z-f1xn/r++qXqYqZf54.5185m-Xf34.5161-Yf-111.997-Zf-3m-Xf60.5453-Yf100.024-Zf3m*X-f1xn/r++qXqYqZf42.744*Y-f1xn/r++qXqYqZf42.744*Z-f1xn/r++qXqYqZf42.744m-Xf-60.5453-Yf-100.024-Zf-3m-Xf-96.9284-Yf-91.4742-Zf3m*X-f1xn/r++qXqYqZf65.0745*Y-f1xn/r++qXqYqZf65.0745*Z-f1xn/r++qXqYqZf65.0745m-Xf96.9284-Yf91.4742-Zf-3m-Xf-60.6143-Yf-91.1166-Zf3m*X+f1xn/r++qXqYqZf39.9971*Y+f1xn/r++qXqYqZf39.9971*Z+f1xn/r++qXqYqZf39.9971m-Xf60.6143-Yf91.1166-Zf-3m-Xf-43.8976-Yf-115.104-Zf3m*X-f1xn/r++qXqYqZf29.3708*Y-f1xn/r++qXqYqZf29.3708*Z-f1xn/r++qXqYqZf29.3708m-Xf43.8976-Yf115.104-Zf-3m-Xf64.6244-Yf32.0754-Zf3m*X+f1xn/r++qXqYqZf54.4406*Y+f1xn/r++qXqYqZf54.4406*Z+f1xn/r++qXqYqZf54.4406m-Xf-64.6244-Yf-32.0754-Zf-3m-Xf-68.2032-Yf50.65-Zf3m*X+f1xn/r++qXqYqZf44.4211*Y+f1xn/r++qXqYqZf44.4211*Z+f1xn/r++qXqYqZf44.4211m-Xf68.2032-Yf-50.65-Zf-3m-Xf-55.4637-Yf93.2748-Zf3m*X-f1xn/r++qXqYqZf49.7967*Y-f1xn/r++qXqYqZf49.7967*Z-f1xn/r++qXqYqZf49.7967m-Xf55.4637-Yf-93.2748-Zf-3m-Xf-100.225-Yf98.7316-Zf3m*X+f1xn/r++qXqYqZf39.6345*Y+f1xn/r++qXqYqZf39.6345*Z+f1xn/r++qXqYqZf39.6345m-Xf100.225-Yf-98.7316-Zf-3m-Xf-65.8134-Yf108.021-Zf3m*X-f1xn/r++qXqYqZf64.2834*Y-f1xn/r++qXqYqZf64.2834*Z-f1xn/r++qXqYqZf64.2834m-Xf65.8134-Yf-108.021-Zf-3m-Xf37.1028-Yf115.833-Zf3m*X+f1xn/r++qXqYqZf69.9546*Y+f1xn/r++qXqYqZf69.9546*Z+f1xn/r++qXqYqZf69.9546m-Xf-37.1028-Yf-115.833-Zf-3m-Xf0-Yf0-Zf0m+*f0.4508X*f0.892625Y+*f-0.892625X*f0.4508Y_m-Xf-0-Yf-0-Zf0a= abs( sin(X / 12.566370614359172)*cos(Y / 1.5707963267948966) + sin(Y / 1.5707963267948966)*cos(Z /6283.185307179586) + sin(Z / 6283.185307179586)*cos(X / 12.566370614359172)) - 0.49835744842250274;am__f1aa-f-465X-Xf465a-f-690Y-Yf690a-f2Z-Zf4am__f1aa-f-77.5X-Xf77.5a-f-115Y-Yf115a-f2.5Z-Zf3.5',float('-77.500000'),float('-115.000000'),float('-inf'),float('77.500000'),float('115.000000'),float('inf'))",
                    "name": "texture",
                    "type": "_fabtypes.Shape",
                    "uid": 10
                },
                {
                    "expr": "\u001213",
                    "name": "morph_count",
                    "type": "int",
                    "uid": 1
                },
                {
                    "expr": "\u001263.2049518063658",
                    "name": "texture_rotation",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "\u00120.49835744842250274",
                    "name": "texture_thickness",
                    "type": "float",
                    "uid": 5
                }
            ],
            "inspector": [
                2184.8594792128324,
                38.001217277533215
            ],
            "name": "texture",
            "script": [
                "import fab",
                "from fab.types import Shape",
                "import math",
                "import random",
                "",
                "def slice_xy(shape,z):",
                "  return Shape(('mXYf%g' % z) + shape.math, shape.bounds.xmin,shape.bounds.ymin, shape.bounds.xmax,shape.bounds.ymax)",
                "",
                "title('Woodgrain (XY)')",
                "",
                "input('serial', float)",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "random.seed(serial)",
                "",
                "# compute the gyroid over a larger region to allow room for the rotation/morphs",
                "xmin = x - width*3",
                "xmax = x + width*3",
                "ymin = y - height*3",
                "ymax = y + height*3",
                "zmin = z - depth",
                "zmax = z + depth",
                "",
                "# real dimensions of the final texture",
                "real_xmin = x - width/2",
                "real_xmax = x + width/2",
                "real_ymin = y - height/2",
                "real_ymax = y + height/2",
                "real_zmin = z - depth/2",
                "real_zmax = z + depth/2",
                "",
                "# randomized gyroid structure",
                "x_period = 0.5",
                "y_period = 4.0",
                "z_period = 0.001",
                "thickness = random.uniform(0.45,0.65)",
                "rotation = random.uniform(20.0, 160.0)",
                "",
                "x_factor = 2 * math.pi / x_period",
                "y_factor = 2 * math.pi / y_period",
                "z_factor = 2 * math.pi / z_period",
                "",
                "fn = \"= abs( sin(X / %(x_factor)s)*cos(Y / %(y_factor)s) + sin(Y / %(y_factor)s)*cos(Z /%(z_factor)s) + sin(Z / %(z_factor)s)*cos(X / %(x_factor)s)) - %(thickness)s;\" % locals()",
                "",
                "# generate the base gyroid and rotate it",
                "shape = fab.shapes.rotate_z(fab.shapes.function_prefix_xyz(fn, xmin, xmax, ymin, ymax, zmin, zmax), rotation, x, y)",
                "",
                "morph_count = random.randrange(10, 20)",
                "",
                "# apply attract/repels to make the texture interesting",
                "for i in range(morph_count):",
                "  r = random.uniform(25.0, 70.0)",
                "  attract = random.random()",
                "  # Prefer to place the morphs near the frame edge",
                "  leftright = random.random()",
                "  shortlong = random.random()",
                "  edge_variance = width * .15",
                "  morph_x = 0",
                "  morph_y = 0",
                "",
                "  if shortlong < 0.5:",
                "    morph_x = random.uniform(real_xmin-edge_variance, real_xmin+edge_variance) if leftright < 0.5 else random.uniform(real_xmax-edge_variance, real_xmax+edge_variance)",
                "    morph_y = random.uniform(real_ymin, real_ymax)",
                "  else:",
                "    morph_x = random.uniform(real_xmin, real_xmax)",
                "    morph_y = random.uniform(real_ymin-edge_variance, real_ymin+edge_variance) if leftright < 0.5 else random.uniform(real_ymax-edge_variance, real_ymax+edge_variance)",
                "",
                "  sb.ui.point(morph_x, morph_y, real_zmax, key=str(i), color=sb.color.red if attract < 0.5 else sb.color.green)",
                "",
                "  if attract < 0.5:",
                "    shape = fab.shapes.attract(shape, morph_x, morph_y, z, r)",
                "  else:",
                "    shape = fab.shapes.repel(shape, morph_x, morph_y, z, r)",
                "",
                "# slice and trim the gyroid to fit the requested dimensions",
                "output('texture', slice_xy(shape & fab.shapes.cube(real_xmin, real_xmax, real_ymin, real_ymax, real_zmin, real_zmax), z))",
                "output('morph_count', morph_count)",
                "output('texture_rotation', rotation)",
                "output('texture_thickness', thickness)",
                "",
                ""
            ],
            "uid": 46
        },
        {
            "datums": [
                {
                    "expr": "body.x-body.width/2+self.scale+20+10",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "body.y-body.height/2+self.scale-2.5",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "'J.D.' # '+str(int(texture.serial))",
                    "name": "text",
                    "type": "str",
                    "uid": 2
                },
                {
                    "expr": "7",
                    "name": "scale",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('m-Xf-40.5-Yf-110.5-Zf0m+f0/-Xf0f7+f0/-Yf0f7_m-Xf0-Yf1-Zf0iiim-Xf0-Yf-1-Zf0iaa-r+q-Xf0.275q-Yf0.275f0.275n-r+q-Xf0.275q-Yf0.275f0.175aa-f0X-Xf0.55a-f0Y-Yf0.275aa-f0.45X-Xf0.55a-f0.275Y-Yf1m-Xf0.65-Yf-1-Zf0-r+q-Xf0.075q-Yf0.075f0.075m-Xf0.9-Yf-1-Zf0iaa-r+q-Xf0.1q-Yf0.5f0.5n-r+q-Xf0.1q-Yf0.5f0.4aa-f0X-Xf1a-f0Y-Yf1aa-f0X-Xf0.1a-f0Y-Yf1m-Xf1.6-Yf-1-Zf0-r+q-Xf0.075q-Yf0.075f0.075',float('-40.500000'),float('-110.500000'),float('-inf'),float('-28.250000'),float('-103.500000'),float('inf'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                960.3604742205459,
                -165.49476798970775
            ],
            "name": "serial_id",
            "script": [
                "import fab",
                "",
                "title('Text')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('text', str)",
                "input('scale', float)",
                "",
                "output('shape', fab.shapes.text(text, x, y, scale))",
                "",
                "# UI",
                "sb.ui.wireframe([(x, y, 0), (x, y+scale, 0)])",
                "sb.ui.point(x, y, 0)",
                "sb.ui.point(x, y + scale, 0, drag=(None, scale, None))",
                ""
            ],
            "uid": 4
        },
        {
            "datums": [
                {
                    "expr": "0.0",
                    "name": "_x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "_y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "body.z-body.depth/2",
                    "name": "zmin",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "self.zmin+1",
                    "name": "zmax",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "\u0011[__4.__4]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1m-Xf-40.5-Yf-110.5-Zf0m+f0/-Xf0f7+f0/-Yf0f7_m-Xf0-Yf1-Zf0iiim-Xf0-Yf-1-Zf0iaa-r+q-Xf0.275q-Yf0.275f0.275n-r+q-Xf0.275q-Yf0.275f0.175aa-f0X-Xf0.55a-f0Y-Yf0.275aa-f0.45X-Xf0.55a-f0.275Y-Yf1m-Xf0.65-Yf-1-Zf0-r+q-Xf0.075q-Yf0.075f0.075m-Xf0.9-Yf-1-Zf0iaa-r+q-Xf0.1q-Yf0.5f0.5n-r+q-Xf0.1q-Yf0.5f0.4aa-f0X-Xf1a-f0Y-Yf1aa-f0X-Xf0.1a-f0Y-Yf1m-Xf1.6-Yf-1-Zf0-r+q-Xf0.075q-Yf0.075f0.075a-f-3Z-Zf-2',float('-40.500000'),float('-110.500000'),float('-3.000000'),float('-28.250000'),float('-103.500000'),float('-2.000000'))",
                    "name": "out",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                1303.0946810254106,
                -50.25935433706866
            ],
            "name": "e1",
            "script": [
                "import fab",
                "",
                "title('Extrude')",
                "",
                "input('_x', float)",
                "input('_y', float)",
                "input('zmin', float)",
                "input('zmax', float)",
                "",
                "input('shape', fab.types.Shape)",
                "output('out', fab.shapes.extrude_z(shape, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(_x, _y, zmin), (_x, _y, zmax)], color=sb.color.green)",
                "sb.ui.point(_x, _y, zmin, color=sb.color.green)",
                "sb.ui.point(_x, _y, zmax, color=sb.color.green)",
                "",
                ""
            ],
            "uid": 5
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__4.__0]",
                    "name": "x0",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "_y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "_z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "\u0011[__5.__5]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('m-*f2f-40.5X__am__f1m-Xf-40.5-Yf-110.5-Zf0m+f0/-Xf0f7+f0/-Yf0f7_m-Xf0-Yf1-Zf0iiim-Xf0-Yf-1-Zf0iaa-r+q-Xf0.275q-Yf0.275f0.275n-r+q-Xf0.275q-Yf0.275f0.175aa-f0X-Xf0.55a-f0Y-Yf0.275aa-f0.45X-Xf0.55a-f0.275Y-Yf1m-Xf0.65-Yf-1-Zf0-r+q-Xf0.075q-Yf0.075f0.075m-Xf0.9-Yf-1-Zf0iaa-r+q-Xf0.1q-Yf0.5f0.5n-r+q-Xf0.1q-Yf0.5f0.4aa-f0X-Xf1a-f0Y-Yf1aa-f0X-Xf0.1a-f0Y-Yf1m-Xf1.6-Yf-1-Zf0-r+q-Xf0.075q-Yf0.075f0.075a-f-3Z-Zf-2',float('-52.750000'),float('-110.500000'),float('-3.000000'),float('-40.500000'),float('-103.500000'),float('-2.000000'))",
                    "name": "reflected",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                1646.6730917321918,
                -165.4403951317789
            ],
            "name": "r0",
            "script": [
                "import fab",
                "",
                "title('Reflect (X)')",
                "",
                "input('x0', float)",
                "input('_y', float)",
                "input('_z', float)",
                "",
                "input('shape', fab.types.Shape)",
                "output('reflected', fab.shapes.reflect_x(shape, x0))",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (x0, _y - 1, _z + 1),",
                "    (x0, _y + 1, _z + 1),",
                "    (x0, _y + 1, _z - 1),",
                "    (x0, _y - 1, _z - 1)], color=sb.color.teal, close=True)",
                "",
                "sb.ui.point(x0, _y, _z, color=sb.color.teal)",
                ""
            ],
            "uid": 6
        },
        {
            "datums": [
                {
                    "expr": "body.x",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "body.y",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "body.z",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "body.width",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "body.height",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "body.depth",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "body.r",
                    "name": "r",
                    "type": "float",
                    "uid": 6
                },
                {
                    "expr": "\u0012fab.types.Shape('iiiiiiiiiiiiiiiiiiiiiam__f1aa-f-76X-Xf76a-f-113.5Y-Yf113.5a-f-3Z-Zf3am__f1iaa-f-77.5X-Xf77.5a-f-113.5Y-Yf113.5aa-f-76X-Xf76a-f-115Y-Yf115a-f-1.5Z-Zf1.5-r++q-Xf76q-Yf113.5q-Zf1.5f1.5-r++q-Xf-76q-Yf113.5q-Zf1.5f1.5-r++q-Xf76q-Yf-113.5q-Zf1.5f1.5-r++q-Xf-76q-Yf-113.5q-Zf1.5f1.5-r++q-Xf76q-Yf113.5q-Zf-1.5f1.5-r++q-Xf-76q-Yf113.5q-Zf-1.5f1.5-r++q-Xf76q-Yf-113.5q-Zf-1.5f1.5-r++q-Xf-76q-Yf-113.5q-Zf-1.5f1.5am__f1-r+q-Xf76q-Yf113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf113.5q-Zf1.5f1.5a-f-76X-Xf76a-r+q-Xf76q-Zf1.5f1.5a-f-113.5Y-Yf113.5am__f1-r+q-Xf-76q-Yf113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf-113.5q-Zf1.5f1.5a-f-76X-Xf76a-r+q-Xf-76q-Zf1.5f1.5a-f-113.5Y-Yf113.5am__f1-r+q-Xf76q-Yf-113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf113.5q-Zf-1.5f1.5a-f-76X-Xf76a-r+q-Xf76q-Zf-1.5f1.5a-f-113.5Y-Yf113.5am__f1-r+q-Xf-76q-Yf-113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf-113.5q-Zf-1.5f1.5a-f-76X-Xf76a-r+q-Xf-76q-Zf-1.5f1.5a-f-113.5Y-Yf113.5',float('-77.500000'),float('-115.000000'),float('-3.000000'),float('77.500000'),float('115.000000'),float('3.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 7
                }
            ],
            "inspector": [
                435.03611804183197,
                281.157682730347
            ],
            "name": "brim",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "",
                "import fab",
                "",
                "title('Rounded cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "input('r', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "# This is the circle's radius in actual units (not a 0-1 fraction)",
                "r_ = r * min([width, height, depth])/2",
                "",
                "output('shape', fab.shapes.rounded_cube(xmin, xmax, ymin, ymax, zmin, zmax, r))",
                "",
                "def drag_hwd(this, dx, dy, dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "# UI",
                "def drag_r(this, x, y, z):",
                "    if abs(this.width) < abs(this.height):",
                "        d = abs(this.width)",
                "        mid = this.ymax + this.height/2 - d / 2",
                "    else:",
                "        d = abs(this.height)",
                "        mid = this.y",
                "    r = 1 - (y - mid) / (d/2)",
                "    this.r = float(min(1, max(0, r)))",
                "",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2, y + height/2, z + depth/2, drag=drag_hwd)",
                "sb.ui.point(xmax, ymax - r_, zmax, drag=drag_r, relative=False)",
                ""
            ],
            "uid": 7
        },
        {
            "datums": [
                {
                    "expr": "brim.x",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "brim.y",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "brim.z",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "brim.width-2",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "brim.height-2",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "brim.depth*2",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "brim.r*2",
                    "name": "r",
                    "type": "float",
                    "uid": 6
                },
                {
                    "expr": "\u0012fab.types.Shape('iiiiiiiiiiiiiiiiiiiiiam__f1aa-f-70.5X-Xf70.5a-f-108Y-Yf108a-f-6Z-Zf6am__f1iaa-f-76.5X-Xf76.5a-f-108Y-Yf108aa-f-70.5X-Xf70.5a-f-114Y-Yf114a-f0Z-Zf0-r++q-Xf70.5q-Yf108qZf6-r++q-Xf-70.5q-Yf108qZf6-r++q-Xf70.5q-Yf-108qZf6-r++q-Xf-70.5q-Yf-108qZf6-r++q-Xf70.5q-Yf108qZf6-r++q-Xf-70.5q-Yf108qZf6-r++q-Xf70.5q-Yf-108qZf6-r++q-Xf-70.5q-Yf-108qZf6am__f1-r+q-Xf70.5q-Yf108f6a-f0Z-Zf0a-r+q-Yf108q-Zf0f6a-f-70.5X-Xf70.5a-r+q-Xf70.5q-Zf0f6a-f-108Y-Yf108am__f1-r+q-Xf-70.5q-Yf108f6a-f0Z-Zf0a-r+q-Yf-108q-Zf0f6a-f-70.5X-Xf70.5a-r+q-Xf-70.5q-Zf0f6a-f-108Y-Yf108am__f1-r+q-Xf70.5q-Yf-108f6a-f0Z-Zf0a-r+q-Yf108q-Zf0f6a-f-70.5X-Xf70.5a-r+q-Xf70.5q-Zf0f6a-f-108Y-Yf108am__f1-r+q-Xf-70.5q-Yf-108f6a-f0Z-Zf0a-r+q-Yf-108q-Zf0f6a-f-70.5X-Xf70.5a-r+q-Xf-70.5q-Zf0f6a-f-108Y-Yf108',float('-76.500000'),float('-114.000000'),float('-6.000000'),float('76.500000'),float('114.000000'),float('6.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 7
                }
            ],
            "inspector": [
                461.1789556637607,
                717.8148010400573
            ],
            "name": "r1",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "",
                "import fab",
                "",
                "title('Rounded cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "input('r', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "# This is the circle's radius in actual units (not a 0-1 fraction)",
                "r_ = r * min([width, height, depth])/2",
                "",
                "output('shape', fab.shapes.rounded_cube(xmin, xmax, ymin, ymax, zmin, zmax, r))",
                "",
                "def drag_hwd(this, dx, dy, dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "# UI",
                "def drag_r(this, x, y, z):",
                "    if abs(this.width) < abs(this.height):",
                "        d = abs(this.width)",
                "        mid = this.ymax + this.height/2 - d / 2",
                "    else:",
                "        d = abs(this.height)",
                "        mid = this.y",
                "    r = 1 - (y - mid) / (d/2)",
                "    this.r = float(min(1, max(0, r)))",
                "",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2, y + height/2, z + depth/2, drag=drag_hwd)",
                "sb.ui.point(xmax, ymax - r_, zmax, drag=drag_r, relative=False)",
                ""
            ],
            "uid": 10
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__7.__7]",
                    "name": "a",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__10.__7]",
                    "name": "b",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                },
                {
                    "expr": "\u0012fab.types.Shape('aiiiiiiiiiiiiiiiiiiiiiam__f1aa-f-76X-Xf76a-f-113.5Y-Yf113.5a-f-3Z-Zf3am__f1iaa-f-77.5X-Xf77.5a-f-113.5Y-Yf113.5aa-f-76X-Xf76a-f-115Y-Yf115a-f-1.5Z-Zf1.5-r++q-Xf76q-Yf113.5q-Zf1.5f1.5-r++q-Xf-76q-Yf113.5q-Zf1.5f1.5-r++q-Xf76q-Yf-113.5q-Zf1.5f1.5-r++q-Xf-76q-Yf-113.5q-Zf1.5f1.5-r++q-Xf76q-Yf113.5q-Zf-1.5f1.5-r++q-Xf-76q-Yf113.5q-Zf-1.5f1.5-r++q-Xf76q-Yf-113.5q-Zf-1.5f1.5-r++q-Xf-76q-Yf-113.5q-Zf-1.5f1.5am__f1-r+q-Xf76q-Yf113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf113.5q-Zf1.5f1.5a-f-76X-Xf76a-r+q-Xf76q-Zf1.5f1.5a-f-113.5Y-Yf113.5am__f1-r+q-Xf-76q-Yf113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf-113.5q-Zf1.5f1.5a-f-76X-Xf76a-r+q-Xf-76q-Zf1.5f1.5a-f-113.5Y-Yf113.5am__f1-r+q-Xf76q-Yf-113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf113.5q-Zf-1.5f1.5a-f-76X-Xf76a-r+q-Xf76q-Zf-1.5f1.5a-f-113.5Y-Yf113.5am__f1-r+q-Xf-76q-Yf-113.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf-113.5q-Zf-1.5f1.5a-f-76X-Xf76a-r+q-Xf-76q-Zf-1.5f1.5a-f-113.5Y-Yf113.5niiiiiiiiiiiiiiiiiiiiiam__f1aa-f-70.5X-Xf70.5a-f-108Y-Yf108a-f-6Z-Zf6am__f1iaa-f-76.5X-Xf76.5a-f-108Y-Yf108aa-f-70.5X-Xf70.5a-f-114Y-Yf114a-f0Z-Zf0-r++q-Xf70.5q-Yf108qZf6-r++q-Xf-70.5q-Yf108qZf6-r++q-Xf70.5q-Yf-108qZf6-r++q-Xf-70.5q-Yf-108qZf6-r++q-Xf70.5q-Yf108qZf6-r++q-Xf-70.5q-Yf108qZf6-r++q-Xf70.5q-Yf-108qZf6-r++q-Xf-70.5q-Yf-108qZf6am__f1-r+q-Xf70.5q-Yf108f6a-f0Z-Zf0a-r+q-Yf108q-Zf0f6a-f-70.5X-Xf70.5a-r+q-Xf70.5q-Zf0f6a-f-108Y-Yf108am__f1-r+q-Xf-70.5q-Yf108f6a-f0Z-Zf0a-r+q-Yf-108q-Zf0f6a-f-70.5X-Xf70.5a-r+q-Xf-70.5q-Zf0f6a-f-108Y-Yf108am__f1-r+q-Xf70.5q-Yf-108f6a-f0Z-Zf0a-r+q-Yf108q-Zf0f6a-f-70.5X-Xf70.5a-r+q-Xf70.5q-Zf0f6a-f-108Y-Yf108am__f1-r+q-Xf-70.5q-Yf-108f6a-f0Z-Zf0a-r+q-Yf-108q-Zf0f6a-f-70.5X-Xf70.5a-r+q-Xf-70.5q-Zf0f6a-f-108Y-Yf108',float('-77.500000'),float('-115.000000'),float('-3.000000'),float('77.500000'),float('115.000000'),float('3.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 2
                }
            ],
            "inspector": [
                884.3147990566492,
                724.3245832461016
            ],
            "name": "d2",
            "script": [
                "import fab.types",
                "",
                "title('Difference')",
                "input('a', fab.types.Shape)",
                "input('b', fab.types.Shape)",
                "",
                "output('shape', a & ~b)",
                ""
            ],
            "uid": 11
        }
    ],
    "protocol": 6,
    "type": "sb"
}
