{
    "nodes": [
        {
            "datums": [
                {
                    "expr": "0",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "art.width+30",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "art.height+30",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "6",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": ".5",
                    "name": "r",
                    "type": "float",
                    "uid": 6
                },
                {
                    "expr": "\u0012fab.types.Shape('iiiiiiiiiiiiiiiiiiiiiam__f1aa-f-78.5X-Xf78.5a-f-122.5Y-Yf122.5a-f-3Z-Zf3am__f1iaa-f-80X-Xf80a-f-122.5Y-Yf122.5aa-f-78.5X-Xf78.5a-f-124Y-Yf124a-f-1.5Z-Zf1.5-r++q-Xf78.5q-Yf122.5q-Zf1.5f1.5-r++q-Xf-78.5q-Yf122.5q-Zf1.5f1.5-r++q-Xf78.5q-Yf-122.5q-Zf1.5f1.5-r++q-Xf-78.5q-Yf-122.5q-Zf1.5f1.5-r++q-Xf78.5q-Yf122.5q-Zf-1.5f1.5-r++q-Xf-78.5q-Yf122.5q-Zf-1.5f1.5-r++q-Xf78.5q-Yf-122.5q-Zf-1.5f1.5-r++q-Xf-78.5q-Yf-122.5q-Zf-1.5f1.5am__f1-r+q-Xf78.5q-Yf122.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf122.5q-Zf1.5f1.5a-f-78.5X-Xf78.5a-r+q-Xf78.5q-Zf1.5f1.5a-f-122.5Y-Yf122.5am__f1-r+q-Xf-78.5q-Yf122.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf-122.5q-Zf1.5f1.5a-f-78.5X-Xf78.5a-r+q-Xf-78.5q-Zf1.5f1.5a-f-122.5Y-Yf122.5am__f1-r+q-Xf78.5q-Yf-122.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf122.5q-Zf-1.5f1.5a-f-78.5X-Xf78.5a-r+q-Xf78.5q-Zf-1.5f1.5a-f-122.5Y-Yf122.5am__f1-r+q-Xf-78.5q-Yf-122.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf-122.5q-Zf-1.5f1.5a-f-78.5X-Xf78.5a-r+q-Xf-78.5q-Zf-1.5f1.5a-f-122.5Y-Yf122.5',float('-80.000000'),float('-124.000000'),float('-3.000000'),float('80.000000'),float('124.000000'),float('3.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 7
                }
            ],
            "inspector": [
                2673.976573187748,
                -534.411510106522
            ],
            "name": "body",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "",
                "import fab",
                "",
                "title('Rounded cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "input('r', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "# This is the circle's radius in actual units (not a 0-1 fraction)",
                "r_ = r * min([width, height, depth])/2",
                "",
                "output('shape', fab.shapes.rounded_cube(xmin, xmax, ymin, ymax, zmin, zmax, r))",
                "",
                "def drag_hwd(this, dx, dy, dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "# UI",
                "def drag_r(this, x, y, z):",
                "    if abs(this.width) < abs(this.height):",
                "        d = abs(this.width)",
                "        mid = this.ymax + this.height/2 - d / 2",
                "    else:",
                "        d = abs(this.height)",
                "        mid = this.y",
                "    r = 1 - (y - mid) / (d/2)",
                "    this.r = float(min(1, max(0, r)))",
                "",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2, y + height/2, z + depth/2, drag=drag_hwd)",
                "sb.ui.point(xmax, ymax - r_, zmax, drag=drag_r, relative=False)",
                ""
            ],
            "uid": 0
        },
        {
            "datums": [
                {
                    "expr": "body.x",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "body.y",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "body.z-2",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "130",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "218",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "body.depth-2",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1aa-f-65X-Xf65a-f-109Y-Yf109a-f-4Z-Zf0',float('-65.000000'),float('-109.000000'),float('-4.000000'),float('65.000000'),float('109.000000'),float('0.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                2217.2937371566727,
                -484.34172622898217
            ],
            "name": "art",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "# Matt Keeter 5/22/15",
                "",
                "import fab",
                "",
                "title('Cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "output('shape', fab.shapes.cube(xmin, xmax, ymin, ymax, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "",
                "def drag_hwd(this, dx,dy,dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2.0, y + height/2.0, z + depth/2.0,",
                "             drag=drag_hwd)",
                "",
                ""
            ],
            "uid": 1
        },
        {
            "datums": [
                {
                    "expr": "art.x",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "art.y",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "body.z",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "art.width-6",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "art.height-6",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "body.depth",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1aa-f-62X-Xf62a-f-106Y-Yf106a-f-3Z-Zf3',float('-62.000000'),float('-106.000000'),float('-3.000000'),float('62.000000'),float('106.000000'),float('3.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                2687.3656627091304,
                38.24648741435635
            ],
            "name": "viewport",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "# Matt Keeter 5/22/15",
                "",
                "import fab",
                "",
                "title('Cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "output('shape', fab.shapes.cube(xmin, xmax, ymin, ymax, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "",
                "def drag_hwd(this, dx,dy,dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2.0, y + height/2.0, z + depth/2.0,",
                "             drag=drag_hwd)",
                "",
                ""
            ],
            "uid": 2
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__0.__7]",
                    "name": "a",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__6.__4,__15.__5,__2.__6,__1.__6]",
                    "name": "b",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                },
                {
                    "expr": "\u0012fab.types.Shape('aiiiiiiiiiiiiiiiiiiiiiam__f1aa-f-78.5X-Xf78.5a-f-122.5Y-Yf122.5a-f-3Z-Zf3am__f1iaa-f-80X-Xf80a-f-122.5Y-Yf122.5aa-f-78.5X-Xf78.5a-f-124Y-Yf124a-f-1.5Z-Zf1.5-r++q-Xf78.5q-Yf122.5q-Zf1.5f1.5-r++q-Xf-78.5q-Yf122.5q-Zf1.5f1.5-r++q-Xf78.5q-Yf-122.5q-Zf1.5f1.5-r++q-Xf-78.5q-Yf-122.5q-Zf1.5f1.5-r++q-Xf78.5q-Yf122.5q-Zf-1.5f1.5-r++q-Xf-78.5q-Yf122.5q-Zf-1.5f1.5-r++q-Xf78.5q-Yf-122.5q-Zf-1.5f1.5-r++q-Xf-78.5q-Yf-122.5q-Zf-1.5f1.5am__f1-r+q-Xf78.5q-Yf122.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf122.5q-Zf1.5f1.5a-f-78.5X-Xf78.5a-r+q-Xf78.5q-Zf1.5f1.5a-f-122.5Y-Yf122.5am__f1-r+q-Xf-78.5q-Yf122.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf-122.5q-Zf1.5f1.5a-f-78.5X-Xf78.5a-r+q-Xf-78.5q-Zf1.5f1.5a-f-122.5Y-Yf122.5am__f1-r+q-Xf78.5q-Yf-122.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf122.5q-Zf-1.5f1.5a-f-78.5X-Xf78.5a-r+q-Xf78.5q-Zf-1.5f1.5a-f-122.5Y-Yf122.5am__f1-r+q-Xf-78.5q-Yf-122.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf-122.5q-Zf-1.5f1.5a-f-78.5X-Xf78.5a-r+q-Xf-78.5q-Zf-1.5f1.5a-f-122.5Y-Yf122.5niiim-*f2f-43X__am__f1m-Xf-43-Yf-119.5-Zf0m+f0/-Xf0f7+f0/-Yf0f7_m-Xf0-Yf1-Zf0iiim-Xf0-Yf-1-Zf0aaini-*f0.55-Xf-0.1*f0.5-Yf0.45i-*f-0.55-Xf0.4*f0-Yf1-*f0-Xf0.4*f-0.5-Yf0.45aa-f0.4X-Xf0.5a-f0Y-Yf1nni-*f-0.3-Xf0.4*f0-Yf0.85i-*f0-Xf0.4*f-0.3-Yf0.55-*f0.3-Xf0.1*f0.3-Yf0.55aa-f0X-Xf0.5a-f0Y-Yf1m-Xf0.6-Yf-1-Zf0aaia-r+q-Xf0.3q-Yf0.725f0.275n-r+q-Xf0.3q-Yf0.725f0.175-r+q-Xf0.3q-Yf0.275f0.275n-r+q-Xf0.3q-Yf0.275f0.175naa-f0X-Xf0.275a-f0.275Y-Yf0.725m-Xf1.25-Yf-1-Zf0iiam/Xf1.1Y_mX+f1/-Yf1f2_aaa-r+q-Xf0.275q-Yf0.725f0.275nmX+f0.725/-Yf0.725f1.2_-r+q-Xf0.275q-Yf0.725f0.175aa-f0X-Xf0.55a-f0.725Y-Yf1nni-*f-0.025-Xf0.275*f0.275-Yf0.925i-*f-0.175-Xf0.55*f0-Yf0.9-*f0.2-Xf0.55*f-0.275-Yf0.725naa-f0.275X-Xf0.65a-f0Y-Yf0.7aa-f0X-Xf0.1a-f0.275Y-Yf0.45a-r+q-Xf0.275q-Yf0.275f0.275n-r+q-Xf0.275q-Yf0.275f0.175m-Xf1.9-Yf-1-Zf0aaaa-f0X-Xf0.3a-f0Y-Yf1n-r+qXq-Yf1f0.2naa-f0X-Xf0.2a-f0Y-Yf0.7a-f-3Z-Zf-2am__f1mXYf3am-Xf-88.7862-Yf-121.611-Zf3m*X+f1xn/r++qXqYqZf55.6664*Y+f1xn/r++qXqYqZf55.6664*Z+f1xn/r++qXqYqZf55.6664m-Xf88.7862-Yf121.611-Zf-3m-Xf33.434-Yf145.659-Zf3m*X-f1xn/r++qXqYqZf50.1468*Y-f1xn/r++qXqYqZf50.1468*Z-f1xn/r++qXqYqZf50.1468m-Xf-33.434-Yf-145.659-Zf-3m-Xf-32.7061-Yf106.29-Zf3m*X-f1xn/r++qXqYqZf57.1894*Y-f1xn/r++qXqYqZf57.1894*Z-f1xn/r++qXqYqZf57.1894m-Xf32.7061-Yf-106.29-Zf-3m-Xf61.9567-Yf-114.025-Zf3m*X-f1xn/r++qXqYqZf50.448*Y-f1xn/r++qXqYqZf50.448*Z-f1xn/r++qXqYqZf50.448m-Xf-61.9567-Yf114.025-Zf-3m-Xf-60.9261-Yf-115.388-Zf3m*X-f1xn/r++qXqYqZf63.3543*Y-f1xn/r++qXqYqZf63.3543*Z-f1xn/r++qXqYqZf63.3543m-Xf60.9261-Yf115.388-Zf-3m-Xf-94.6948-Yf62.1321-Zf3m*X-f1xn/r++qXqYqZf27.1869*Y-f1xn/r++qXqYqZf27.1869*Z-f1xn/r++qXqYqZf27.1869m-Xf94.6948-Yf-62.1321-Zf-3m-Xf71.3829-Yf-59.5718-Zf3m*X+f1xn/r++qXqYqZf34.6316*Y+f1xn/r++qXqYqZf34.6316*Z+f1xn/r++qXqYqZf34.6316m-Xf-71.3829-Yf59.5718-Zf-3m-Xf-103.893-Yf-18.3109-Zf3m*X-f1xn/r++qXqYqZf55.8953*Y-f1xn/r++qXqYqZf55.8953*Z-f1xn/r++qXqYqZf55.8953m-Xf103.893-Yf18.3109-Zf-3m-Xf77.5638-Yf72.9776-Zf3m*X+f1xn/r++qXqYqZf54.3824*Y+f1xn/r++qXqYqZf54.3824*Z+f1xn/r++qXqYqZf54.3824m-Xf-77.5638-Yf-72.9776-Zf-3m-Xf59.088-Yf115.807-Zf3m*X-f1xn/r++qXqYqZf29.99*Y-f1xn/r++qXqYqZf29.99*Z-f1xn/r++qXqYqZf29.99m-Xf-59.088-Yf-115.807-Zf-3m-Xf90.0003-Yf-20.6517-Zf3m*X-f1xn/r++qXqYqZf69.2157*Y-f1xn/r++qXqYqZf69.2157*Z-f1xn/r++qXqYqZf69.2157m-Xf-90.0003-Yf20.6517-Zf-3m-Xf-45.3051-Yf-123.227-Zf3m*X-f1xn/r++qXqYqZf50.6513*Y-f1xn/r++qXqYqZf50.6513*Z-f1xn/r++qXqYqZf50.6513m-Xf45.3051-Yf123.227-Zf-3m-Xf-7.14891-Yf135.93-Zf3m*X+f1xn/r++qXqYqZf43.5299*Y+f1xn/r++qXqYqZf43.5299*Z+f1xn/r++qXqYqZf43.5299m-Xf7.14891-Yf-135.93-Zf-3m-Xf0-Yf0-Zf0m+*f-0.278386X*f0.960469Y+*f-0.960469X*f-0.278386Y_m-Xf-0-Yf-0-Zf0a= abs( sin(X / 12.566370614359172)*cos(Y / 1.5707963267948966) + sin(Y / 1.5707963267948966)*cos(Z /6283.185307179586) + sin(Z / 6283.185307179586)*cos(X / 12.566370614359172)) - 0.5145053746780949;am__f1aa-f-480X-Xf480a-f-744Y-Yf744a-f2Z-Zf4am__f1aa-f-80X-Xf80a-f-124Y-Yf124a-f2.5Z-Zf3.5a-f2.7Z-Zf3am__f1aa-f-62X-Xf62a-f-106Y-Yf106a-f-3Z-Zf3am__f1aa-f-65X-Xf65a-f-109Y-Yf109a-f-4Z-Zf0',float('-80.000000'),float('-124.000000'),float('-3.000000'),float('80.000000'),float('124.000000'),float('3.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 2
                }
            ],
            "inspector": [
                3265.268016469022,
                -108.048125252266
            ],
            "name": "d0",
            "script": [
                "import fab.types",
                "",
                "title('Difference')",
                "input('a', fab.types.Shape)",
                "input('b', fab.types.Shape)",
                "",
                "output('shape', a & ~b)",
                ""
            ],
            "uid": 3
        },
        {
            "datums": [
                {
                    "expr": "0.0",
                    "name": "_x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "_y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "self.zmax-0.3",
                    "name": "zmin",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "body.z+body.depth/2",
                    "name": "zmax",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "\u0011[__46.__10]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1mXYf3am-Xf-88.7862-Yf-121.611-Zf3m*X+f1xn/r++qXqYqZf55.6664*Y+f1xn/r++qXqYqZf55.6664*Z+f1xn/r++qXqYqZf55.6664m-Xf88.7862-Yf121.611-Zf-3m-Xf33.434-Yf145.659-Zf3m*X-f1xn/r++qXqYqZf50.1468*Y-f1xn/r++qXqYqZf50.1468*Z-f1xn/r++qXqYqZf50.1468m-Xf-33.434-Yf-145.659-Zf-3m-Xf-32.7061-Yf106.29-Zf3m*X-f1xn/r++qXqYqZf57.1894*Y-f1xn/r++qXqYqZf57.1894*Z-f1xn/r++qXqYqZf57.1894m-Xf32.7061-Yf-106.29-Zf-3m-Xf61.9567-Yf-114.025-Zf3m*X-f1xn/r++qXqYqZf50.448*Y-f1xn/r++qXqYqZf50.448*Z-f1xn/r++qXqYqZf50.448m-Xf-61.9567-Yf114.025-Zf-3m-Xf-60.9261-Yf-115.388-Zf3m*X-f1xn/r++qXqYqZf63.3543*Y-f1xn/r++qXqYqZf63.3543*Z-f1xn/r++qXqYqZf63.3543m-Xf60.9261-Yf115.388-Zf-3m-Xf-94.6948-Yf62.1321-Zf3m*X-f1xn/r++qXqYqZf27.1869*Y-f1xn/r++qXqYqZf27.1869*Z-f1xn/r++qXqYqZf27.1869m-Xf94.6948-Yf-62.1321-Zf-3m-Xf71.3829-Yf-59.5718-Zf3m*X+f1xn/r++qXqYqZf34.6316*Y+f1xn/r++qXqYqZf34.6316*Z+f1xn/r++qXqYqZf34.6316m-Xf-71.3829-Yf59.5718-Zf-3m-Xf-103.893-Yf-18.3109-Zf3m*X-f1xn/r++qXqYqZf55.8953*Y-f1xn/r++qXqYqZf55.8953*Z-f1xn/r++qXqYqZf55.8953m-Xf103.893-Yf18.3109-Zf-3m-Xf77.5638-Yf72.9776-Zf3m*X+f1xn/r++qXqYqZf54.3824*Y+f1xn/r++qXqYqZf54.3824*Z+f1xn/r++qXqYqZf54.3824m-Xf-77.5638-Yf-72.9776-Zf-3m-Xf59.088-Yf115.807-Zf3m*X-f1xn/r++qXqYqZf29.99*Y-f1xn/r++qXqYqZf29.99*Z-f1xn/r++qXqYqZf29.99m-Xf-59.088-Yf-115.807-Zf-3m-Xf90.0003-Yf-20.6517-Zf3m*X-f1xn/r++qXqYqZf69.2157*Y-f1xn/r++qXqYqZf69.2157*Z-f1xn/r++qXqYqZf69.2157m-Xf-90.0003-Yf20.6517-Zf-3m-Xf-45.3051-Yf-123.227-Zf3m*X-f1xn/r++qXqYqZf50.6513*Y-f1xn/r++qXqYqZf50.6513*Z-f1xn/r++qXqYqZf50.6513m-Xf45.3051-Yf123.227-Zf-3m-Xf-7.14891-Yf135.93-Zf3m*X+f1xn/r++qXqYqZf43.5299*Y+f1xn/r++qXqYqZf43.5299*Z+f1xn/r++qXqYqZf43.5299m-Xf7.14891-Yf-135.93-Zf-3m-Xf0-Yf0-Zf0m+*f-0.278386X*f0.960469Y+*f-0.960469X*f-0.278386Y_m-Xf-0-Yf-0-Zf0a= abs( sin(X / 12.566370614359172)*cos(Y / 1.5707963267948966) + sin(Y / 1.5707963267948966)*cos(Z /6283.185307179586) + sin(Z / 6283.185307179586)*cos(X / 12.566370614359172)) - 0.5145053746780949;am__f1aa-f-480X-Xf480a-f-744Y-Yf744a-f2Z-Zf4am__f1aa-f-80X-Xf80a-f-124Y-Yf124a-f2.5Z-Zf3.5a-f2.7Z-Zf3',float('-80.000000'),float('-124.000000'),float('2.700000'),float('80.000000'),float('124.000000'),float('3.000000'))",
                    "name": "out",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                2705.218983374103,
                471.7786356273207
            ],
            "name": "e0",
            "script": [
                "import fab",
                "",
                "title('Extrude')",
                "",
                "input('_x', float)",
                "input('_y', float)",
                "input('zmin', float)",
                "input('zmax', float)",
                "",
                "input('shape', fab.types.Shape)",
                "output('out', fab.shapes.extrude_z(shape, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(_x, _y, zmin), (_x, _y, zmax)], color=sb.color.green)",
                "sb.ui.point(_x, _y, zmin, color=sb.color.green)",
                "sb.ui.point(_x, _y, zmax, color=sb.color.green)",
                "",
                ""
            ],
            "uid": 15
        },
        {
            "datums": [
                {
                    "expr": "art.x",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "art.y",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "art.z",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "art.width-2.5",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "art.height-1",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "art.depth-2.5",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1aa-f-63.75X-Xf63.75a-f-108.5Y-Yf108.5a-f-2.75Z-Zf-1.25',float('-63.750000'),float('-108.500000'),float('-2.750000'),float('63.750000'),float('108.500000'),float('-1.250000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                4495.026543194784,
                388.2242707387202
            ],
            "name": "backer",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "# Matt Keeter 5/22/15",
                "",
                "import fab",
                "",
                "title('Cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "output('shape', fab.shapes.cube(xmin, xmax, ymin, ymax, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "",
                "def drag_hwd(this, dx,dy,dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2.0, y + height/2.0, z + depth/2.0,",
                "             drag=drag_hwd)",
                "",
                ""
            ],
            "uid": 8
        },
        {
            "datums": [
                {
                    "expr": "backer.x",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "backer.y",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "backer.z",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "backer.width-30",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "backer.height-40",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "backer.depth",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1aa-f-48.75X-Xf48.75a-f-88.5Y-Yf88.5a-f-2.75Z-Zf-1.25',float('-48.750000'),float('-88.500000'),float('-2.750000'),float('48.750000'),float('88.500000'),float('-1.250000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                4428.102153122337,
                883.1036507766974
            ],
            "name": "back_cutout",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "# Matt Keeter 5/22/15",
                "",
                "import fab",
                "",
                "title('Cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "output('shape', fab.shapes.cube(xmin, xmax, ymin, ymax, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "",
                "def drag_hwd(this, dx,dy,dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2.0, y + height/2.0, z + depth/2.0,",
                "             drag=drag_hwd)",
                "",
                ""
            ],
            "uid": 9
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__8.__6]",
                    "name": "a",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__9.__6]",
                    "name": "b",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                },
                {
                    "expr": "\u0012fab.types.Shape('aam__f1aa-f-63.75X-Xf63.75a-f-108.5Y-Yf108.5a-f-2.75Z-Zf-1.25nam__f1aa-f-48.75X-Xf48.75a-f-88.5Y-Yf88.5a-f-2.75Z-Zf-1.25',float('-63.750000'),float('-108.500000'),float('-2.750000'),float('63.750000'),float('108.500000'),float('-1.250000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 2
                }
            ],
            "inspector": [
                4866.697986669341,
                1027.2425759964267
            ],
            "name": "d1",
            "script": [
                "import fab.types",
                "",
                "title('Difference')",
                "input('a', fab.types.Shape)",
                "input('b', fab.types.Shape)",
                "",
                "output('shape', a & ~b)",
                ""
            ],
            "uid": 17
        },
        {
            "datums": [
                {
                    "expr": "backer.x",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "backer.y",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "backer.z+backer.depth/2-self.depth/2",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "backer.width",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "5",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "1",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1aa-f-63.75X-Xf63.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25',float('-63.750000'),float('-2.500000'),float('-2.250000'),float('63.750000'),float('2.500000'),float('-1.250000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                4041.271087077689,
                1287.7777177274806
            ],
            "name": "back_support",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "# Matt Keeter 5/22/15",
                "",
                "import fab",
                "",
                "title('Cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "output('shape', fab.shapes.cube(xmin, xmax, ymin, ymax, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "",
                "def drag_hwd(this, dx,dy,dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2.0, y + height/2.0, z + depth/2.0,",
                "             drag=drag_hwd)",
                "",
                ""
            ],
            "uid": 18
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__18.__6]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "_x",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "_y",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "1",
                    "name": "i",
                    "type": "int",
                    "uid": 3
                },
                {
                    "expr": "math.floor((back_cutout.height/2) / self.dy)+1",
                    "name": "j",
                    "type": "int",
                    "uid": 4
                },
                {
                    "expr": "1",
                    "name": "dx",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "30",
                    "name": "dy",
                    "type": "float",
                    "uid": 6
                },
                {
                    "expr": "\u0012fab.types.Shape('m-Xf0-Yf0-Zf0iim-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-63.75X-Xf63.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25m-Xf0-Yf30-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-63.75X-Xf63.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25m-Xf0-Yf60-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-63.75X-Xf63.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25',float('-63.750000'),float('-2.500000'),float('-2.250000'),float('63.750000'),float('62.500000'),float('-1.250000'))",
                    "name": "array",
                    "type": "_fabtypes.Shape",
                    "uid": 7
                }
            ],
            "inspector": [
                4498.010323556321,
                1282.1643905504739
            ],
            "name": "a2",
            "script": [
                "import fab",
                "",
                "title('Array (2D)')",
                "",
                "input('shape', fab.types.Shape)",
                "input('_x', float)",
                "input('_y', float)",
                "input('i', int)",
                "input('j', int)",
                "input('dx', float)",
                "input('dy', float)",
                "",
                "output('array', fab.shapes.iterate3d(shape, i, j, 1, dx, dy, 0))",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (_x + dx, _y, 0), (_x, _y, 0), (_x, _y + dy, 0)], color=sb.color.teal)",
                "sb.ui.wireframe([",
                "    (_x + dx, _y - 0.3, 0), (_x + dx, _y + 0.3, 0)], color=sb.color.teal)",
                "sb.ui.wireframe([",
                "    (_x + 0.3, _y + dy, 0), (_x - 0.3, _y + dy, 0)], color=sb.color.teal)",
                "",
                "sb.ui.point(_x, _y, 0, color=sb.color.teal)",
                "sb.ui.point(_x + dx, _y, 0, color=sb.color.teal, drag=(dx, None, None))",
                "sb.ui.point(_x, _y + dy, 0, color=sb.color.teal, drag=(None, dy, None))",
                ""
            ],
            "uid": 19
        },
        {
            "datums": [
                {
                    "expr": "body.x",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "body.y+body.height/2-(35/4)-2",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "body.z-body.depth/2",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "body.width/3",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "35/4",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "body.depth/1.25",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1aa-f-26.6667X-Xf26.6667a-f108.875Y-Yf117.625a-f-5.4Z-Zf-0.6',float('-26.666666'),float('108.875000'),float('-5.400000'),float('26.666666'),float('117.625000'),float('-0.600000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                2428.0297096806817,
                928.4032358006973
            ],
            "name": "hanger_slot",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "# Matt Keeter 5/22/15",
                "",
                "import fab",
                "",
                "title('Cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "output('shape', fab.shapes.cube(xmin, xmax, ymin, ymax, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "",
                "def drag_hwd(this, dx,dy,dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2.0, y + height/2.0, z + depth/2.0,",
                "             drag=drag_hwd)",
                "",
                ""
            ],
            "uid": 22
        },
        {
            "datums": [
                {
                    "expr": "hanger_slot.x+self.r",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "hanger_slot.y+hanger_slot.height/2+self.r/3",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "body.z-body.depth/2",
                    "name": "zmin",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "self.zmin+1",
                    "name": "zmax",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "hanger_slot.width/20",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2',float('0.000000'),float('115.847221'),float('-3.000000'),float('5.333333'),float('121.180557'),float('-2.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                2386.0361415143543,
                -1700.660548299134
            ],
            "name": "hanger_notch",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Cylinder (Z)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('zmin', float)",
                "input('zmax', float)",
                "input('r', float)",
                "",
                "output('shape', fab.shapes.cylinder(x, y, zmin, zmax, r))",
                "",
                "# UI",
                "sb.ui.wireframe([(x, y, zmin), (x, y, zmax)])",
                "sb.ui.wireframe([(x, y, zmin), (x+r, y, zmin)])",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmin)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmax)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.point(x, y, zmin)",
                "sb.ui.point(x, y, zmax)",
                "sb.ui.point(x + r, y, zmin, drag=(r, None, None))",
                ""
            ],
            "uid": 23
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__23.__5]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "_x",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "_y",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "math.floor(hanger_slot.width/2/(hanger_notch.r*2))",
                    "name": "i",
                    "type": "int",
                    "uid": 3
                },
                {
                    "expr": "1",
                    "name": "j",
                    "type": "int",
                    "uid": 4
                },
                {
                    "expr": "hanger_notch.r*2",
                    "name": "dx",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "1",
                    "name": "dy",
                    "type": "float",
                    "uid": 6
                },
                {
                    "expr": "\u0012fab.types.Shape('m-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0iiiim-Xf0-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf5.33333-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf10.6667-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf16-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf21.3333-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2',float('0.000000'),float('115.847221'),float('-3.000000'),float('26.666634'),float('121.180557'),float('-2.000000'))",
                    "name": "array",
                    "type": "_fabtypes.Shape",
                    "uid": 7
                }
            ],
            "inspector": [
                2848.3688404111126,
                -1735.7986894461847
            ],
            "name": "a3",
            "script": [
                "import fab",
                "",
                "title('Array (2D)')",
                "",
                "input('shape', fab.types.Shape)",
                "input('_x', float)",
                "input('_y', float)",
                "input('i', int)",
                "input('j', int)",
                "input('dx', float)",
                "input('dy', float)",
                "",
                "output('array', fab.shapes.iterate3d(shape, i, j, 1, dx, dy, 0))",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (_x + dx, _y, 0), (_x, _y, 0), (_x, _y + dy, 0)], color=sb.color.teal)",
                "sb.ui.wireframe([",
                "    (_x + dx, _y - 0.3, 0), (_x + dx, _y + 0.3, 0)], color=sb.color.teal)",
                "sb.ui.wireframe([",
                "    (_x + 0.3, _y + dy, 0), (_x - 0.3, _y + dy, 0)], color=sb.color.teal)",
                "",
                "sb.ui.point(_x, _y, 0, color=sb.color.teal)",
                "sb.ui.point(_x + dx, _y, 0, color=sb.color.teal, drag=(dx, None, None))",
                "sb.ui.point(_x, _y + dy, 0, color=sb.color.teal, drag=(None, dy, None))",
                ""
            ],
            "uid": 24
        },
        {
            "datums": [
                {
                    "expr": "body.x+body.width/2-(35/4)-2-back_retainer.width/2",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "body.y-body.height/3.5+20",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "hanger_slot.z",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "hanger_slot.height+back_retainer.width",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "hanger_slot.width+20",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "hanger_slot.depth",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1aa-f61.375X-Xf73.625a-f-87.5238Y-Yf-14.1905a-f-5.4Z-Zf-0.6',float('61.375000'),float('-87.523811'),float('-5.400000'),float('73.625000'),float('-14.190476'),float('-0.600000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                2348.792012966219,
                1398.8964708922865
            ],
            "name": "other_hanger_slot",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "# Matt Keeter 5/22/15",
                "",
                "import fab",
                "",
                "title('Cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "output('shape', fab.shapes.cube(xmin, xmax, ymin, ymax, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "",
                "def drag_hwd(this, dx,dy,dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2.0, y + height/2.0, z + depth/2.0,",
                "             drag=drag_hwd)",
                "",
                ""
            ],
            "uid": 27
        },
        {
            "datums": [
                {
                    "expr": "body.x",
                    "name": "x0",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "_y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "_z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "\u0011[__27.__6]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('im-*f2f0X__am__f1aa-f61.375X-Xf73.625a-f-87.5238Y-Yf-14.1905a-f-5.4Z-Zf-0.6am__f1aa-f61.375X-Xf73.625a-f-87.5238Y-Yf-14.1905a-f-5.4Z-Zf-0.6',float('-73.625000'),float('-87.523811'),float('-5.400000'),float('73.625000'),float('-14.190476'),float('-0.600000'))",
                    "name": "reflected",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                2838.139403473214,
                1395.3210541034953
            ],
            "name": "m2",
            "script": [
                "import fab",
                "",
                "title('Mirror (X)')",
                "",
                "input('x0', float)",
                "input('_y', float)",
                "input('_z', float)",
                "",
                "input('shape', fab.types.Shape)",
                "output('reflected', fab.shapes.reflect_x(shape, x0) | shape)",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (x0, _y - 1, _z + 1),",
                "    (x0, _y + 1, _z + 1),",
                "    (x0, _y + 1, _z - 1),",
                "    (x0, _y - 1, _z - 1)], color=sb.color.teal, close=True)",
                "",
                "sb.ui.point(x0, _y, _z, color=sb.color.teal)",
                ""
            ],
            "uid": 28
        },
        {
            "datums": [
                {
                    "expr": "0.0",
                    "name": "_x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "body.y",
                    "name": "y0",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "_z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "\u0011[__28.__4]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('im_-*f2f0Y_im-*f2f0X__am__f1aa-f61.375X-Xf73.625a-f-87.5238Y-Yf-14.1905a-f-5.4Z-Zf-0.6am__f1aa-f61.375X-Xf73.625a-f-87.5238Y-Yf-14.1905a-f-5.4Z-Zf-0.6im-*f2f0X__am__f1aa-f61.375X-Xf73.625a-f-87.5238Y-Yf-14.1905a-f-5.4Z-Zf-0.6am__f1aa-f61.375X-Xf73.625a-f-87.5238Y-Yf-14.1905a-f-5.4Z-Zf-0.6',float('-73.625000'),float('-87.523811'),float('-5.400000'),float('73.625000'),float('87.523811'),float('-0.600000'))",
                    "name": "reflected",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                3216.937666593565,
                1395.1643399368425
            ],
            "name": "m4",
            "script": [
                "import fab",
                "",
                "title('Mirror (Y)')",
                "",
                "input('_x', float)",
                "input('y0', float)",
                "input('_z', float)",
                "",
                "input('shape', fab.types.Shape)",
                "output('reflected', fab.shapes.reflect_y(shape, y0) | shape)",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (_x - 1, y0, _z + 1),",
                "    (_x + 1, y0, _z + 1),",
                "    (_x + 1, y0, _z - 1),",
                "    (_x - 1, y0, _z - 1)], color=sb.color.teal, close=True)",
                "",
                "sb.ui.point(_x, y0, _z, color=sb.color.teal)",
                "",
                ""
            ],
            "uid": 32
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__44.__4]",
                    "name": "a",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__42.__2]",
                    "name": "b",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                },
                {
                    "expr": "\u0012fab.types.Shape('iim-*f2f0X__m-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0iiiim-Xf0-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf5.33333-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf10.6667-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf16-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf21.3333-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0iiiim-Xf0-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf5.33333-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf10.6667-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf16-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf21.3333-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2aiim-*f2f0X__am__f1aa-f-66.75X-Xf-63.25a-f-109Y-Yf109a-f-3Z-Zf-1.5am__f1aa-f-66.75X-Xf-63.25a-f-109Y-Yf109a-f-3Z-Zf-1.5aiiiiiiiiiiiiiiiiiiiiiam__f1aa-f-78.5X-Xf78.5a-f-122.5Y-Yf122.5a-f-3Z-Zf3am__f1iaa-f-80X-Xf80a-f-122.5Y-Yf122.5aa-f-78.5X-Xf78.5a-f-124Y-Yf124a-f-1.5Z-Zf1.5-r++q-Xf78.5q-Yf122.5q-Zf1.5f1.5-r++q-Xf-78.5q-Yf122.5q-Zf1.5f1.5-r++q-Xf78.5q-Yf-122.5q-Zf1.5f1.5-r++q-Xf-78.5q-Yf-122.5q-Zf1.5f1.5-r++q-Xf78.5q-Yf122.5q-Zf-1.5f1.5-r++q-Xf-78.5q-Yf122.5q-Zf-1.5f1.5-r++q-Xf78.5q-Yf-122.5q-Zf-1.5f1.5-r++q-Xf-78.5q-Yf-122.5q-Zf-1.5f1.5am__f1-r+q-Xf78.5q-Yf122.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf122.5q-Zf1.5f1.5a-f-78.5X-Xf78.5a-r+q-Xf78.5q-Zf1.5f1.5a-f-122.5Y-Yf122.5am__f1-r+q-Xf-78.5q-Yf122.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf-122.5q-Zf1.5f1.5a-f-78.5X-Xf78.5a-r+q-Xf-78.5q-Zf1.5f1.5a-f-122.5Y-Yf122.5am__f1-r+q-Xf78.5q-Yf-122.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf122.5q-Zf-1.5f1.5a-f-78.5X-Xf78.5a-r+q-Xf78.5q-Zf-1.5f1.5a-f-122.5Y-Yf122.5am__f1-r+q-Xf-78.5q-Yf-122.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf-122.5q-Zf-1.5f1.5a-f-78.5X-Xf78.5a-r+q-Xf-78.5q-Zf-1.5f1.5a-f-122.5Y-Yf122.5niiim-*f2f-43X__am__f1m-Xf-43-Yf-119.5-Zf0m+f0/-Xf0f7+f0/-Yf0f7_m-Xf0-Yf1-Zf0iiim-Xf0-Yf-1-Zf0aaini-*f0.55-Xf-0.1*f0.5-Yf0.45i-*f-0.55-Xf0.4*f0-Yf1-*f0-Xf0.4*f-0.5-Yf0.45aa-f0.4X-Xf0.5a-f0Y-Yf1nni-*f-0.3-Xf0.4*f0-Yf0.85i-*f0-Xf0.4*f-0.3-Yf0.55-*f0.3-Xf0.1*f0.3-Yf0.55aa-f0X-Xf0.5a-f0Y-Yf1m-Xf0.6-Yf-1-Zf0aaia-r+q-Xf0.3q-Yf0.725f0.275n-r+q-Xf0.3q-Yf0.725f0.175-r+q-Xf0.3q-Yf0.275f0.275n-r+q-Xf0.3q-Yf0.275f0.175naa-f0X-Xf0.275a-f0.275Y-Yf0.725m-Xf1.25-Yf-1-Zf0iiam/Xf1.1Y_mX+f1/-Yf1f2_aaa-r+q-Xf0.275q-Yf0.725f0.275nmX+f0.725/-Yf0.725f1.2_-r+q-Xf0.275q-Yf0.725f0.175aa-f0X-Xf0.55a-f0.725Y-Yf1nni-*f-0.025-Xf0.275*f0.275-Yf0.925i-*f-0.175-Xf0.55*f0-Yf0.9-*f0.2-Xf0.55*f-0.275-Yf0.725naa-f0.275X-Xf0.65a-f0Y-Yf0.7aa-f0X-Xf0.1a-f0.275Y-Yf0.45a-r+q-Xf0.275q-Yf0.275f0.275n-r+q-Xf0.275q-Yf0.275f0.175m-Xf1.9-Yf-1-Zf0aaaa-f0X-Xf0.3a-f0Y-Yf1n-r+qXq-Yf1f0.2naa-f0X-Xf0.2a-f0Y-Yf0.7a-f-3Z-Zf-2am__f1mXYf3am-Xf-88.7862-Yf-121.611-Zf3m*X+f1xn/r++qXqYqZf55.6664*Y+f1xn/r++qXqYqZf55.6664*Z+f1xn/r++qXqYqZf55.6664m-Xf88.7862-Yf121.611-Zf-3m-Xf33.434-Yf145.659-Zf3m*X-f1xn/r++qXqYqZf50.1468*Y-f1xn/r++qXqYqZf50.1468*Z-f1xn/r++qXqYqZf50.1468m-Xf-33.434-Yf-145.659-Zf-3m-Xf-32.7061-Yf106.29-Zf3m*X-f1xn/r++qXqYqZf57.1894*Y-f1xn/r++qXqYqZf57.1894*Z-f1xn/r++qXqYqZf57.1894m-Xf32.7061-Yf-106.29-Zf-3m-Xf61.9567-Yf-114.025-Zf3m*X-f1xn/r++qXqYqZf50.448*Y-f1xn/r++qXqYqZf50.448*Z-f1xn/r++qXqYqZf50.448m-Xf-61.9567-Yf114.025-Zf-3m-Xf-60.9261-Yf-115.388-Zf3m*X-f1xn/r++qXqYqZf63.3543*Y-f1xn/r++qXqYqZf63.3543*Z-f1xn/r++qXqYqZf63.3543m-Xf60.9261-Yf115.388-Zf-3m-Xf-94.6948-Yf62.1321-Zf3m*X-f1xn/r++qXqYqZf27.1869*Y-f1xn/r++qXqYqZf27.1869*Z-f1xn/r++qXqYqZf27.1869m-Xf94.6948-Yf-62.1321-Zf-3m-Xf71.3829-Yf-59.5718-Zf3m*X+f1xn/r++qXqYqZf34.6316*Y+f1xn/r++qXqYqZf34.6316*Z+f1xn/r++qXqYqZf34.6316m-Xf-71.3829-Yf59.5718-Zf-3m-Xf-103.893-Yf-18.3109-Zf3m*X-f1xn/r++qXqYqZf55.8953*Y-f1xn/r++qXqYqZf55.8953*Z-f1xn/r++qXqYqZf55.8953m-Xf103.893-Yf18.3109-Zf-3m-Xf77.5638-Yf72.9776-Zf3m*X+f1xn/r++qXqYqZf54.3824*Y+f1xn/r++qXqYqZf54.3824*Z+f1xn/r++qXqYqZf54.3824m-Xf-77.5638-Yf-72.9776-Zf-3m-Xf59.088-Yf115.807-Zf3m*X-f1xn/r++qXqYqZf29.99*Y-f1xn/r++qXqYqZf29.99*Z-f1xn/r++qXqYqZf29.99m-Xf-59.088-Yf-115.807-Zf-3m-Xf90.0003-Yf-20.6517-Zf3m*X-f1xn/r++qXqYqZf69.2157*Y-f1xn/r++qXqYqZf69.2157*Z-f1xn/r++qXqYqZf69.2157m-Xf-90.0003-Yf20.6517-Zf-3m-Xf-45.3051-Yf-123.227-Zf3m*X-f1xn/r++qXqYqZf50.6513*Y-f1xn/r++qXqYqZf50.6513*Z-f1xn/r++qXqYqZf50.6513m-Xf45.3051-Yf123.227-Zf-3m-Xf-7.14891-Yf135.93-Zf3m*X+f1xn/r++qXqYqZf43.5299*Y+f1xn/r++qXqYqZf43.5299*Z+f1xn/r++qXqYqZf43.5299m-Xf7.14891-Yf-135.93-Zf-3m-Xf0-Yf0-Zf0m+*f-0.278386X*f0.960469Y+*f-0.960469X*f-0.278386Y_m-Xf-0-Yf-0-Zf0a= abs( sin(X / 12.566370614359172)*cos(Y / 1.5707963267948966) + sin(Y / 1.5707963267948966)*cos(Z /6283.185307179586) + sin(Z / 6283.185307179586)*cos(X / 12.566370614359172)) - 0.5145053746780949;am__f1aa-f-480X-Xf480a-f-744Y-Yf744a-f2Z-Zf4am__f1aa-f-80X-Xf80a-f-124Y-Yf124a-f2.5Z-Zf3.5a-f2.7Z-Zf3am__f1aa-f-62X-Xf62a-f-106Y-Yf106a-f-3Z-Zf3am__f1aa-f-65X-Xf65a-f-109Y-Yf109a-f-4Z-Zf0niam__f1aa-f-26.6667X-Xf26.6667a-f108.875Y-Yf117.625a-f-5.4Z-Zf-0.6im_-*f2f0Y_im-*f2f0X__am__f1aa-f61.375X-Xf73.625a-f-87.5238Y-Yf-14.1905a-f-5.4Z-Zf-0.6am__f1aa-f61.375X-Xf73.625a-f-87.5238Y-Yf-14.1905a-f-5.4Z-Zf-0.6im-*f2f0X__am__f1aa-f61.375X-Xf73.625a-f-87.5238Y-Yf-14.1905a-f-5.4Z-Zf-0.6am__f1aa-f61.375X-Xf73.625a-f-87.5238Y-Yf-14.1905a-f-5.4Z-Zf-0.6',float('-80.000000'),float('-124.000000'),float('-3.000000'),float('80.000000'),float('124.000000'),float('3.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 2
                }
            ],
            "inspector": [
                4093.1092512656087,
                -183.60702246288386
            ],
            "name": "u0",
            "script": [
                "import fab.types",
                "",
                "title('Union')",
                "input('a', fab.types.Shape)",
                "input('b', fab.types.Shape)",
                "",
                "output('shape', a | b)",
                ""
            ],
            "uid": 34
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__34.__2]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0012fab.types.Shape('iim-*f2f0X__m-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0iiiim-Xf0-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf5.33333-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf10.6667-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf16-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf21.3333-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0iiiim-Xf0-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf5.33333-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf10.6667-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf16-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf21.3333-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2aiim-*f2f0X__am__f1aa-f-66.75X-Xf-63.25a-f-109Y-Yf109a-f-3Z-Zf-1.5am__f1aa-f-66.75X-Xf-63.25a-f-109Y-Yf109a-f-3Z-Zf-1.5aiiiiiiiiiiiiiiiiiiiiiam__f1aa-f-78.5X-Xf78.5a-f-122.5Y-Yf122.5a-f-3Z-Zf3am__f1iaa-f-80X-Xf80a-f-122.5Y-Yf122.5aa-f-78.5X-Xf78.5a-f-124Y-Yf124a-f-1.5Z-Zf1.5-r++q-Xf78.5q-Yf122.5q-Zf1.5f1.5-r++q-Xf-78.5q-Yf122.5q-Zf1.5f1.5-r++q-Xf78.5q-Yf-122.5q-Zf1.5f1.5-r++q-Xf-78.5q-Yf-122.5q-Zf1.5f1.5-r++q-Xf78.5q-Yf122.5q-Zf-1.5f1.5-r++q-Xf-78.5q-Yf122.5q-Zf-1.5f1.5-r++q-Xf78.5q-Yf-122.5q-Zf-1.5f1.5-r++q-Xf-78.5q-Yf-122.5q-Zf-1.5f1.5am__f1-r+q-Xf78.5q-Yf122.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf122.5q-Zf1.5f1.5a-f-78.5X-Xf78.5a-r+q-Xf78.5q-Zf1.5f1.5a-f-122.5Y-Yf122.5am__f1-r+q-Xf-78.5q-Yf122.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf-122.5q-Zf1.5f1.5a-f-78.5X-Xf78.5a-r+q-Xf-78.5q-Zf1.5f1.5a-f-122.5Y-Yf122.5am__f1-r+q-Xf78.5q-Yf-122.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf122.5q-Zf-1.5f1.5a-f-78.5X-Xf78.5a-r+q-Xf78.5q-Zf-1.5f1.5a-f-122.5Y-Yf122.5am__f1-r+q-Xf-78.5q-Yf-122.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf-122.5q-Zf-1.5f1.5a-f-78.5X-Xf78.5a-r+q-Xf-78.5q-Zf-1.5f1.5a-f-122.5Y-Yf122.5niiim-*f2f-43X__am__f1m-Xf-43-Yf-119.5-Zf0m+f0/-Xf0f7+f0/-Yf0f7_m-Xf0-Yf1-Zf0iiim-Xf0-Yf-1-Zf0aaini-*f0.55-Xf-0.1*f0.5-Yf0.45i-*f-0.55-Xf0.4*f0-Yf1-*f0-Xf0.4*f-0.5-Yf0.45aa-f0.4X-Xf0.5a-f0Y-Yf1nni-*f-0.3-Xf0.4*f0-Yf0.85i-*f0-Xf0.4*f-0.3-Yf0.55-*f0.3-Xf0.1*f0.3-Yf0.55aa-f0X-Xf0.5a-f0Y-Yf1m-Xf0.6-Yf-1-Zf0aaia-r+q-Xf0.3q-Yf0.725f0.275n-r+q-Xf0.3q-Yf0.725f0.175-r+q-Xf0.3q-Yf0.275f0.275n-r+q-Xf0.3q-Yf0.275f0.175naa-f0X-Xf0.275a-f0.275Y-Yf0.725m-Xf1.25-Yf-1-Zf0iiam/Xf1.1Y_mX+f1/-Yf1f2_aaa-r+q-Xf0.275q-Yf0.725f0.275nmX+f0.725/-Yf0.725f1.2_-r+q-Xf0.275q-Yf0.725f0.175aa-f0X-Xf0.55a-f0.725Y-Yf1nni-*f-0.025-Xf0.275*f0.275-Yf0.925i-*f-0.175-Xf0.55*f0-Yf0.9-*f0.2-Xf0.55*f-0.275-Yf0.725naa-f0.275X-Xf0.65a-f0Y-Yf0.7aa-f0X-Xf0.1a-f0.275Y-Yf0.45a-r+q-Xf0.275q-Yf0.275f0.275n-r+q-Xf0.275q-Yf0.275f0.175m-Xf1.9-Yf-1-Zf0aaaa-f0X-Xf0.3a-f0Y-Yf1n-r+qXq-Yf1f0.2naa-f0X-Xf0.2a-f0Y-Yf0.7a-f-3Z-Zf-2am__f1mXYf3am-Xf-88.7862-Yf-121.611-Zf3m*X+f1xn/r++qXqYqZf55.6664*Y+f1xn/r++qXqYqZf55.6664*Z+f1xn/r++qXqYqZf55.6664m-Xf88.7862-Yf121.611-Zf-3m-Xf33.434-Yf145.659-Zf3m*X-f1xn/r++qXqYqZf50.1468*Y-f1xn/r++qXqYqZf50.1468*Z-f1xn/r++qXqYqZf50.1468m-Xf-33.434-Yf-145.659-Zf-3m-Xf-32.7061-Yf106.29-Zf3m*X-f1xn/r++qXqYqZf57.1894*Y-f1xn/r++qXqYqZf57.1894*Z-f1xn/r++qXqYqZf57.1894m-Xf32.7061-Yf-106.29-Zf-3m-Xf61.9567-Yf-114.025-Zf3m*X-f1xn/r++qXqYqZf50.448*Y-f1xn/r++qXqYqZf50.448*Z-f1xn/r++qXqYqZf50.448m-Xf-61.9567-Yf114.025-Zf-3m-Xf-60.9261-Yf-115.388-Zf3m*X-f1xn/r++qXqYqZf63.3543*Y-f1xn/r++qXqYqZf63.3543*Z-f1xn/r++qXqYqZf63.3543m-Xf60.9261-Yf115.388-Zf-3m-Xf-94.6948-Yf62.1321-Zf3m*X-f1xn/r++qXqYqZf27.1869*Y-f1xn/r++qXqYqZf27.1869*Z-f1xn/r++qXqYqZf27.1869m-Xf94.6948-Yf-62.1321-Zf-3m-Xf71.3829-Yf-59.5718-Zf3m*X+f1xn/r++qXqYqZf34.6316*Y+f1xn/r++qXqYqZf34.6316*Z+f1xn/r++qXqYqZf34.6316m-Xf-71.3829-Yf59.5718-Zf-3m-Xf-103.893-Yf-18.3109-Zf3m*X-f1xn/r++qXqYqZf55.8953*Y-f1xn/r++qXqYqZf55.8953*Z-f1xn/r++qXqYqZf55.8953m-Xf103.893-Yf18.3109-Zf-3m-Xf77.5638-Yf72.9776-Zf3m*X+f1xn/r++qXqYqZf54.3824*Y+f1xn/r++qXqYqZf54.3824*Z+f1xn/r++qXqYqZf54.3824m-Xf-77.5638-Yf-72.9776-Zf-3m-Xf59.088-Yf115.807-Zf3m*X-f1xn/r++qXqYqZf29.99*Y-f1xn/r++qXqYqZf29.99*Z-f1xn/r++qXqYqZf29.99m-Xf-59.088-Yf-115.807-Zf-3m-Xf90.0003-Yf-20.6517-Zf3m*X-f1xn/r++qXqYqZf69.2157*Y-f1xn/r++qXqYqZf69.2157*Z-f1xn/r++qXqYqZf69.2157m-Xf-90.0003-Yf20.6517-Zf-3m-Xf-45.3051-Yf-123.227-Zf3m*X-f1xn/r++qXqYqZf50.6513*Y-f1xn/r++qXqYqZf50.6513*Z-f1xn/r++qXqYqZf50.6513m-Xf45.3051-Yf123.227-Zf-3m-Xf-7.14891-Yf135.93-Zf3m*X+f1xn/r++qXqYqZf43.5299*Y+f1xn/r++qXqYqZf43.5299*Z+f1xn/r++qXqYqZf43.5299m-Xf7.14891-Yf-135.93-Zf-3m-Xf0-Yf0-Zf0m+*f-0.278386X*f0.960469Y+*f-0.960469X*f-0.278386Y_m-Xf-0-Yf-0-Zf0a= abs( sin(X / 12.566370614359172)*cos(Y / 1.5707963267948966) + sin(Y / 1.5707963267948966)*cos(Z /6283.185307179586) + sin(Z / 6283.185307179586)*cos(X / 12.566370614359172)) - 0.5145053746780949;am__f1aa-f-480X-Xf480a-f-744Y-Yf744a-f2Z-Zf4am__f1aa-f-80X-Xf80a-f-124Y-Yf124a-f2.5Z-Zf3.5a-f2.7Z-Zf3am__f1aa-f-62X-Xf62a-f-106Y-Yf106a-f-3Z-Zf3am__f1aa-f-65X-Xf65a-f-109Y-Yf109a-f-4Z-Zf0niam__f1aa-f-26.6667X-Xf26.6667a-f108.875Y-Yf117.625a-f-5.4Z-Zf-0.6im_-*f2f0Y_im-*f2f0X__am__f1aa-f61.375X-Xf73.625a-f-87.5238Y-Yf-14.1905a-f-5.4Z-Zf-0.6am__f1aa-f61.375X-Xf73.625a-f-87.5238Y-Yf-14.1905a-f-5.4Z-Zf-0.6im-*f2f0X__am__f1aa-f61.375X-Xf73.625a-f-87.5238Y-Yf-14.1905a-f-5.4Z-Zf-0.6am__f1aa-f61.375X-Xf73.625a-f-87.5238Y-Yf-14.1905a-f-5.4Z-Zf-0.6',float('-80.000000'),float('-124.000000'),float('-3.000000'),float('80.000000'),float('124.000000'),float('3.000000'))",
                    "name": "out",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                }
            ],
            "inspector": [
                4471.128087015978,
                -161.38714472582856
            ],
            "name": "frame_outer",
            "script": [
                "import fab",
                "",
                "title('Mesh (.stl)')",
                "",
                "input('shape', fab.types.Shape)",
                "output('out', shape)",
                "",
                "sb.export.stl(shape)",
                ""
            ],
            "uid": 35
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__43.__4,__17.__2]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0012fab.types.Shape('iim_-*f2f0Y_m-Xf0-Yf0-Zf0iim-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-63.75X-Xf63.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25m-Xf0-Yf30-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-63.75X-Xf63.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25m-Xf0-Yf60-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-63.75X-Xf63.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25m-Xf0-Yf0-Zf0iim-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-63.75X-Xf63.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25m-Xf0-Yf30-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-63.75X-Xf63.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25m-Xf0-Yf60-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-63.75X-Xf63.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25aam__f1aa-f-63.75X-Xf63.75a-f-108.5Y-Yf108.5a-f-2.75Z-Zf-1.25nam__f1aa-f-48.75X-Xf48.75a-f-88.5Y-Yf88.5a-f-2.75Z-Zf-1.25',float('-63.750000'),float('-108.500000'),float('-2.750000'),float('63.750000'),float('108.500000'),float('-1.250000'))",
                    "name": "out",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                }
            ],
            "inspector": [
                5263.548836081155,
                1208.5836698175349
            ],
            "name": "frame_inner",
            "script": [
                "import fab",
                "",
                "title('Mesh (.stl)')",
                "",
                "input('shape', fab.types.Shape)",
                "output('out', shape)",
                "",
                "sb.export.stl(shape)",
                ""
            ],
            "uid": 36
        },
        {
            "datums": [
                {
                    "expr": "art.x-art.width/2",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "art.y",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "body.z-body.depth/2+self.depth/2",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "3.5",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "art.height",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "1.5",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1aa-f-66.75X-Xf-63.25a-f-109Y-Yf109a-f-3Z-Zf-1.5',float('-66.750000'),float('-109.000000'),float('-3.000000'),float('-63.250000'),float('109.000000'),float('-1.500000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                2794.195584507498,
                -1042.8650233164858
            ],
            "name": "back_retainer",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "# Matt Keeter 5/22/15",
                "",
                "import fab",
                "",
                "title('Cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "output('shape', fab.shapes.cube(xmin, xmax, ymin, ymax, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "",
                "def drag_hwd(this, dx,dy,dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2.0, y + height/2.0, z + depth/2.0,",
                "             drag=drag_hwd)",
                "",
                ""
            ],
            "uid": 37
        },
        {
            "datums": [
                {
                    "expr": "art.x",
                    "name": "x0",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "_y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "_z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "\u0011[__37.__6]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('im-*f2f0X__am__f1aa-f-66.75X-Xf-63.25a-f-109Y-Yf109a-f-3Z-Zf-1.5am__f1aa-f-66.75X-Xf-63.25a-f-109Y-Yf109a-f-3Z-Zf-1.5',float('-66.750000'),float('-109.000000'),float('-3.000000'),float('66.750000'),float('109.000000'),float('-1.500000'))",
                    "name": "reflected",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                3224.269157129408,
                -865.3918570255956
            ],
            "name": "m8",
            "script": [
                "import fab",
                "",
                "title('Mirror (X)')",
                "",
                "input('x0', float)",
                "input('_y', float)",
                "input('_z', float)",
                "",
                "input('shape', fab.types.Shape)",
                "output('reflected', fab.shapes.reflect_x(shape, x0) | shape)",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (x0, _y - 1, _z + 1),",
                "    (x0, _y + 1, _z + 1),",
                "    (x0, _y + 1, _z - 1),",
                "    (x0, _y - 1, _z - 1)], color=sb.color.teal, close=True)",
                "",
                "sb.ui.point(x0, _y, _z, color=sb.color.teal)",
                ""
            ],
            "uid": 41
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__41.__4,__3.__2]",
                    "name": "a",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__22.__6,__32.__4]",
                    "name": "b",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                },
                {
                    "expr": "\u0012fab.types.Shape('aiim-*f2f0X__am__f1aa-f-66.75X-Xf-63.25a-f-109Y-Yf109a-f-3Z-Zf-1.5am__f1aa-f-66.75X-Xf-63.25a-f-109Y-Yf109a-f-3Z-Zf-1.5aiiiiiiiiiiiiiiiiiiiiiam__f1aa-f-78.5X-Xf78.5a-f-122.5Y-Yf122.5a-f-3Z-Zf3am__f1iaa-f-80X-Xf80a-f-122.5Y-Yf122.5aa-f-78.5X-Xf78.5a-f-124Y-Yf124a-f-1.5Z-Zf1.5-r++q-Xf78.5q-Yf122.5q-Zf1.5f1.5-r++q-Xf-78.5q-Yf122.5q-Zf1.5f1.5-r++q-Xf78.5q-Yf-122.5q-Zf1.5f1.5-r++q-Xf-78.5q-Yf-122.5q-Zf1.5f1.5-r++q-Xf78.5q-Yf122.5q-Zf-1.5f1.5-r++q-Xf-78.5q-Yf122.5q-Zf-1.5f1.5-r++q-Xf78.5q-Yf-122.5q-Zf-1.5f1.5-r++q-Xf-78.5q-Yf-122.5q-Zf-1.5f1.5am__f1-r+q-Xf78.5q-Yf122.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf122.5q-Zf1.5f1.5a-f-78.5X-Xf78.5a-r+q-Xf78.5q-Zf1.5f1.5a-f-122.5Y-Yf122.5am__f1-r+q-Xf-78.5q-Yf122.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf-122.5q-Zf1.5f1.5a-f-78.5X-Xf78.5a-r+q-Xf-78.5q-Zf1.5f1.5a-f-122.5Y-Yf122.5am__f1-r+q-Xf78.5q-Yf-122.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf122.5q-Zf-1.5f1.5a-f-78.5X-Xf78.5a-r+q-Xf78.5q-Zf-1.5f1.5a-f-122.5Y-Yf122.5am__f1-r+q-Xf-78.5q-Yf-122.5f1.5a-f-1.5Z-Zf1.5a-r+q-Yf-122.5q-Zf-1.5f1.5a-f-78.5X-Xf78.5a-r+q-Xf-78.5q-Zf-1.5f1.5a-f-122.5Y-Yf122.5niiim-*f2f-43X__am__f1m-Xf-43-Yf-119.5-Zf0m+f0/-Xf0f7+f0/-Yf0f7_m-Xf0-Yf1-Zf0iiim-Xf0-Yf-1-Zf0aaini-*f0.55-Xf-0.1*f0.5-Yf0.45i-*f-0.55-Xf0.4*f0-Yf1-*f0-Xf0.4*f-0.5-Yf0.45aa-f0.4X-Xf0.5a-f0Y-Yf1nni-*f-0.3-Xf0.4*f0-Yf0.85i-*f0-Xf0.4*f-0.3-Yf0.55-*f0.3-Xf0.1*f0.3-Yf0.55aa-f0X-Xf0.5a-f0Y-Yf1m-Xf0.6-Yf-1-Zf0aaia-r+q-Xf0.3q-Yf0.725f0.275n-r+q-Xf0.3q-Yf0.725f0.175-r+q-Xf0.3q-Yf0.275f0.275n-r+q-Xf0.3q-Yf0.275f0.175naa-f0X-Xf0.275a-f0.275Y-Yf0.725m-Xf1.25-Yf-1-Zf0iiam/Xf1.1Y_mX+f1/-Yf1f2_aaa-r+q-Xf0.275q-Yf0.725f0.275nmX+f0.725/-Yf0.725f1.2_-r+q-Xf0.275q-Yf0.725f0.175aa-f0X-Xf0.55a-f0.725Y-Yf1nni-*f-0.025-Xf0.275*f0.275-Yf0.925i-*f-0.175-Xf0.55*f0-Yf0.9-*f0.2-Xf0.55*f-0.275-Yf0.725naa-f0.275X-Xf0.65a-f0Y-Yf0.7aa-f0X-Xf0.1a-f0.275Y-Yf0.45a-r+q-Xf0.275q-Yf0.275f0.275n-r+q-Xf0.275q-Yf0.275f0.175m-Xf1.9-Yf-1-Zf0aaaa-f0X-Xf0.3a-f0Y-Yf1n-r+qXq-Yf1f0.2naa-f0X-Xf0.2a-f0Y-Yf0.7a-f-3Z-Zf-2am__f1mXYf3am-Xf-88.7862-Yf-121.611-Zf3m*X+f1xn/r++qXqYqZf55.6664*Y+f1xn/r++qXqYqZf55.6664*Z+f1xn/r++qXqYqZf55.6664m-Xf88.7862-Yf121.611-Zf-3m-Xf33.434-Yf145.659-Zf3m*X-f1xn/r++qXqYqZf50.1468*Y-f1xn/r++qXqYqZf50.1468*Z-f1xn/r++qXqYqZf50.1468m-Xf-33.434-Yf-145.659-Zf-3m-Xf-32.7061-Yf106.29-Zf3m*X-f1xn/r++qXqYqZf57.1894*Y-f1xn/r++qXqYqZf57.1894*Z-f1xn/r++qXqYqZf57.1894m-Xf32.7061-Yf-106.29-Zf-3m-Xf61.9567-Yf-114.025-Zf3m*X-f1xn/r++qXqYqZf50.448*Y-f1xn/r++qXqYqZf50.448*Z-f1xn/r++qXqYqZf50.448m-Xf-61.9567-Yf114.025-Zf-3m-Xf-60.9261-Yf-115.388-Zf3m*X-f1xn/r++qXqYqZf63.3543*Y-f1xn/r++qXqYqZf63.3543*Z-f1xn/r++qXqYqZf63.3543m-Xf60.9261-Yf115.388-Zf-3m-Xf-94.6948-Yf62.1321-Zf3m*X-f1xn/r++qXqYqZf27.1869*Y-f1xn/r++qXqYqZf27.1869*Z-f1xn/r++qXqYqZf27.1869m-Xf94.6948-Yf-62.1321-Zf-3m-Xf71.3829-Yf-59.5718-Zf3m*X+f1xn/r++qXqYqZf34.6316*Y+f1xn/r++qXqYqZf34.6316*Z+f1xn/r++qXqYqZf34.6316m-Xf-71.3829-Yf59.5718-Zf-3m-Xf-103.893-Yf-18.3109-Zf3m*X-f1xn/r++qXqYqZf55.8953*Y-f1xn/r++qXqYqZf55.8953*Z-f1xn/r++qXqYqZf55.8953m-Xf103.893-Yf18.3109-Zf-3m-Xf77.5638-Yf72.9776-Zf3m*X+f1xn/r++qXqYqZf54.3824*Y+f1xn/r++qXqYqZf54.3824*Z+f1xn/r++qXqYqZf54.3824m-Xf-77.5638-Yf-72.9776-Zf-3m-Xf59.088-Yf115.807-Zf3m*X-f1xn/r++qXqYqZf29.99*Y-f1xn/r++qXqYqZf29.99*Z-f1xn/r++qXqYqZf29.99m-Xf-59.088-Yf-115.807-Zf-3m-Xf90.0003-Yf-20.6517-Zf3m*X-f1xn/r++qXqYqZf69.2157*Y-f1xn/r++qXqYqZf69.2157*Z-f1xn/r++qXqYqZf69.2157m-Xf-90.0003-Yf20.6517-Zf-3m-Xf-45.3051-Yf-123.227-Zf3m*X-f1xn/r++qXqYqZf50.6513*Y-f1xn/r++qXqYqZf50.6513*Z-f1xn/r++qXqYqZf50.6513m-Xf45.3051-Yf123.227-Zf-3m-Xf-7.14891-Yf135.93-Zf3m*X+f1xn/r++qXqYqZf43.5299*Y+f1xn/r++qXqYqZf43.5299*Z+f1xn/r++qXqYqZf43.5299m-Xf7.14891-Yf-135.93-Zf-3m-Xf0-Yf0-Zf0m+*f-0.278386X*f0.960469Y+*f-0.960469X*f-0.278386Y_m-Xf-0-Yf-0-Zf0a= abs( sin(X / 12.566370614359172)*cos(Y / 1.5707963267948966) + sin(Y / 1.5707963267948966)*cos(Z /6283.185307179586) + sin(Z / 6283.185307179586)*cos(X / 12.566370614359172)) - 0.5145053746780949;am__f1aa-f-480X-Xf480a-f-744Y-Yf744a-f2Z-Zf4am__f1aa-f-80X-Xf80a-f-124Y-Yf124a-f2.5Z-Zf3.5a-f2.7Z-Zf3am__f1aa-f-62X-Xf62a-f-106Y-Yf106a-f-3Z-Zf3am__f1aa-f-65X-Xf65a-f-109Y-Yf109a-f-4Z-Zf0niam__f1aa-f-26.6667X-Xf26.6667a-f108.875Y-Yf117.625a-f-5.4Z-Zf-0.6im_-*f2f0Y_im-*f2f0X__am__f1aa-f61.375X-Xf73.625a-f-87.5238Y-Yf-14.1905a-f-5.4Z-Zf-0.6am__f1aa-f61.375X-Xf73.625a-f-87.5238Y-Yf-14.1905a-f-5.4Z-Zf-0.6im-*f2f0X__am__f1aa-f61.375X-Xf73.625a-f-87.5238Y-Yf-14.1905a-f-5.4Z-Zf-0.6am__f1aa-f61.375X-Xf73.625a-f-87.5238Y-Yf-14.1905a-f-5.4Z-Zf-0.6',float('-80.000000'),float('-124.000000'),float('-3.000000'),float('80.000000'),float('124.000000'),float('3.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 2
                }
            ],
            "inspector": [
                3701.7567999327525,
                787.8789865012938
            ],
            "name": "d3",
            "script": [
                "import fab.types",
                "",
                "title('Difference')",
                "input('a', fab.types.Shape)",
                "input('b', fab.types.Shape)",
                "",
                "output('shape', a & ~b)",
                ""
            ],
            "uid": 42
        },
        {
            "datums": [
                {
                    "expr": "0.0",
                    "name": "_x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "backer.y",
                    "name": "y0",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "_z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "\u0011[__19.__7]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('im_-*f2f0Y_m-Xf0-Yf0-Zf0iim-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-63.75X-Xf63.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25m-Xf0-Yf30-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-63.75X-Xf63.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25m-Xf0-Yf60-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-63.75X-Xf63.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25m-Xf0-Yf0-Zf0iim-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-63.75X-Xf63.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25m-Xf0-Yf30-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-63.75X-Xf63.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25m-Xf0-Yf60-Zf0m-Xf0-Yf0-Zf0am__f1aa-f-63.75X-Xf63.75a-f-2.5Y-Yf2.5a-f-2.25Z-Zf-1.25',float('-63.750000'),float('-62.500000'),float('-2.250000'),float('63.750000'),float('62.500000'),float('-1.250000'))",
                    "name": "reflected",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                4853.0947568664515,
                1281.9456113241345
            ],
            "name": "m9",
            "script": [
                "import fab",
                "",
                "title('Mirror (Y)')",
                "",
                "input('_x', float)",
                "input('y0', float)",
                "input('_z', float)",
                "",
                "input('shape', fab.types.Shape)",
                "output('reflected', fab.shapes.reflect_y(shape, y0) | shape)",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (_x - 1, y0, _z + 1),",
                "    (_x + 1, y0, _z + 1),",
                "    (_x + 1, y0, _z - 1),",
                "    (_x - 1, y0, _z - 1)], color=sb.color.teal, close=True)",
                "",
                "sb.ui.point(_x, y0, _z, color=sb.color.teal)",
                "",
                ""
            ],
            "uid": 43
        },
        {
            "datums": [
                {
                    "expr": "hanger_slot.x",
                    "name": "x0",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "_y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "_z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "\u0011[__24.__7]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('im-*f2f0X__m-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0iiiim-Xf0-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf5.33333-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf10.6667-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf16-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf21.3333-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf0-Yf0-Zf0m-Xf0-Yf0-Zf0iiiim-Xf0-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf5.33333-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf10.6667-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf16-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2m-Xf21.3333-Yf0-Zf0am__f1-r+q-Xf2.66667q-Yf118.514f2.66667a-f-3Z-Zf-2',float('-26.666634'),float('115.847221'),float('-3.000000'),float('26.666634'),float('121.180557'),float('-2.000000'))",
                    "name": "reflected",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                3211.5502578766054,
                -1473.5888085659726
            ],
            "name": "m10",
            "script": [
                "import fab",
                "",
                "title('Mirror (X)')",
                "",
                "input('x0', float)",
                "input('_y', float)",
                "input('_z', float)",
                "",
                "input('shape', fab.types.Shape)",
                "output('reflected', fab.shapes.reflect_x(shape, x0) | shape)",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (x0, _y - 1, _z + 1),",
                "    (x0, _y + 1, _z + 1),",
                "    (x0, _y + 1, _z - 1),",
                "    (x0, _y - 1, _z - 1)], color=sb.color.teal, close=True)",
                "",
                "sb.ui.point(x0, _y, _z, color=sb.color.teal)",
                ""
            ],
            "uid": 44
        },
        {
            "datums": [
                {
                    "expr": "4361",
                    "name": "serial",
                    "type": "float",
                    "uid": 6
                },
                {
                    "expr": "body.x",
                    "name": "x",
                    "type": "float",
                    "uid": 7
                },
                {
                    "expr": "body.y",
                    "name": "y",
                    "type": "float",
                    "uid": 8
                },
                {
                    "expr": "body.z+body.depth/2",
                    "name": "z",
                    "type": "float",
                    "uid": 9
                },
                {
                    "expr": "body.width",
                    "name": "width",
                    "type": "float",
                    "uid": 11
                },
                {
                    "expr": "body.height",
                    "name": "height",
                    "type": "float",
                    "uid": 12
                },
                {
                    "expr": "1",
                    "name": "depth",
                    "type": "float",
                    "uid": 13
                },
                {
                    "expr": "\u0012fab.types.Shape('mXYf3am-Xf-88.7862-Yf-121.611-Zf3m*X+f1xn/r++qXqYqZf55.6664*Y+f1xn/r++qXqYqZf55.6664*Z+f1xn/r++qXqYqZf55.6664m-Xf88.7862-Yf121.611-Zf-3m-Xf33.434-Yf145.659-Zf3m*X-f1xn/r++qXqYqZf50.1468*Y-f1xn/r++qXqYqZf50.1468*Z-f1xn/r++qXqYqZf50.1468m-Xf-33.434-Yf-145.659-Zf-3m-Xf-32.7061-Yf106.29-Zf3m*X-f1xn/r++qXqYqZf57.1894*Y-f1xn/r++qXqYqZf57.1894*Z-f1xn/r++qXqYqZf57.1894m-Xf32.7061-Yf-106.29-Zf-3m-Xf61.9567-Yf-114.025-Zf3m*X-f1xn/r++qXqYqZf50.448*Y-f1xn/r++qXqYqZf50.448*Z-f1xn/r++qXqYqZf50.448m-Xf-61.9567-Yf114.025-Zf-3m-Xf-60.9261-Yf-115.388-Zf3m*X-f1xn/r++qXqYqZf63.3543*Y-f1xn/r++qXqYqZf63.3543*Z-f1xn/r++qXqYqZf63.3543m-Xf60.9261-Yf115.388-Zf-3m-Xf-94.6948-Yf62.1321-Zf3m*X-f1xn/r++qXqYqZf27.1869*Y-f1xn/r++qXqYqZf27.1869*Z-f1xn/r++qXqYqZf27.1869m-Xf94.6948-Yf-62.1321-Zf-3m-Xf71.3829-Yf-59.5718-Zf3m*X+f1xn/r++qXqYqZf34.6316*Y+f1xn/r++qXqYqZf34.6316*Z+f1xn/r++qXqYqZf34.6316m-Xf-71.3829-Yf59.5718-Zf-3m-Xf-103.893-Yf-18.3109-Zf3m*X-f1xn/r++qXqYqZf55.8953*Y-f1xn/r++qXqYqZf55.8953*Z-f1xn/r++qXqYqZf55.8953m-Xf103.893-Yf18.3109-Zf-3m-Xf77.5638-Yf72.9776-Zf3m*X+f1xn/r++qXqYqZf54.3824*Y+f1xn/r++qXqYqZf54.3824*Z+f1xn/r++qXqYqZf54.3824m-Xf-77.5638-Yf-72.9776-Zf-3m-Xf59.088-Yf115.807-Zf3m*X-f1xn/r++qXqYqZf29.99*Y-f1xn/r++qXqYqZf29.99*Z-f1xn/r++qXqYqZf29.99m-Xf-59.088-Yf-115.807-Zf-3m-Xf90.0003-Yf-20.6517-Zf3m*X-f1xn/r++qXqYqZf69.2157*Y-f1xn/r++qXqYqZf69.2157*Z-f1xn/r++qXqYqZf69.2157m-Xf-90.0003-Yf20.6517-Zf-3m-Xf-45.3051-Yf-123.227-Zf3m*X-f1xn/r++qXqYqZf50.6513*Y-f1xn/r++qXqYqZf50.6513*Z-f1xn/r++qXqYqZf50.6513m-Xf45.3051-Yf123.227-Zf-3m-Xf-7.14891-Yf135.93-Zf3m*X+f1xn/r++qXqYqZf43.5299*Y+f1xn/r++qXqYqZf43.5299*Z+f1xn/r++qXqYqZf43.5299m-Xf7.14891-Yf-135.93-Zf-3m-Xf0-Yf0-Zf0m+*f-0.278386X*f0.960469Y+*f-0.960469X*f-0.278386Y_m-Xf-0-Yf-0-Zf0a= abs( sin(X / 12.566370614359172)*cos(Y / 1.5707963267948966) + sin(Y / 1.5707963267948966)*cos(Z /6283.185307179586) + sin(Z / 6283.185307179586)*cos(X / 12.566370614359172)) - 0.5145053746780949;am__f1aa-f-480X-Xf480a-f-744Y-Yf744a-f2Z-Zf4am__f1aa-f-80X-Xf80a-f-124Y-Yf124a-f2.5Z-Zf3.5',float('-80.000000'),float('-124.000000'),float('-inf'),float('80.000000'),float('124.000000'),float('inf'))",
                    "name": "texture",
                    "type": "_fabtypes.Shape",
                    "uid": 10
                },
                {
                    "expr": "\u001213",
                    "name": "morph_count",
                    "type": "int",
                    "uid": 1
                },
                {
                    "expr": "\u0012106.16391866157005",
                    "name": "texture_rotation",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "\u00120.5145053746780949",
                    "name": "texture_thickness",
                    "type": "float",
                    "uid": 5
                }
            ],
            "inspector": [
                2184.8594792128324,
                38.001217277533215
            ],
            "name": "texture",
            "script": [
                "import fab",
                "from fab.types import Shape",
                "import math",
                "import random",
                "",
                "def slice_xy(shape,z):",
                "  return Shape(('mXYf%g' % z) + shape.math, shape.bounds.xmin,shape.bounds.ymin, shape.bounds.xmax,shape.bounds.ymax)",
                "",
                "title('Woodgrain (XY)')",
                "",
                "input('serial', float)",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "random.seed(serial)",
                "",
                "# compute the gyroid over a larger region to allow room for the rotation/morphs",
                "xmin = x - width*3",
                "xmax = x + width*3",
                "ymin = y - height*3",
                "ymax = y + height*3",
                "zmin = z - depth",
                "zmax = z + depth",
                "",
                "# real dimensions of the final texture",
                "real_xmin = x - width/2",
                "real_xmax = x + width/2",
                "real_ymin = y - height/2",
                "real_ymax = y + height/2",
                "real_zmin = z - depth/2",
                "real_zmax = z + depth/2",
                "",
                "# randomized gyroid structure",
                "x_period = 0.5",
                "y_period = 4.0",
                "z_period = 0.001",
                "thickness = random.uniform(0.45,0.65)",
                "rotation = random.uniform(20.0, 160.0)",
                "",
                "x_factor = 2 * math.pi / x_period",
                "y_factor = 2 * math.pi / y_period",
                "z_factor = 2 * math.pi / z_period",
                "",
                "fn = \"= abs( sin(X / %(x_factor)s)*cos(Y / %(y_factor)s) + sin(Y / %(y_factor)s)*cos(Z /%(z_factor)s) + sin(Z / %(z_factor)s)*cos(X / %(x_factor)s)) - %(thickness)s;\" % locals()",
                "",
                "# generate the base gyroid and rotate it",
                "shape = fab.shapes.rotate_z(fab.shapes.function_prefix_xyz(fn, xmin, xmax, ymin, ymax, zmin, zmax), rotation, x, y)",
                "",
                "morph_count = random.randrange(10, 20)",
                "",
                "# apply attract/repels to make the texture interesting",
                "for i in range(morph_count):",
                "  r = random.uniform(25.0, 70.0)",
                "  attract = random.random()",
                "  # Prefer to place the morphs near the frame edge",
                "  leftright = random.random()",
                "  shortlong = random.random()",
                "  edge_variance = width * .15",
                "  morph_x = 0",
                "  morph_y = 0",
                "",
                "  if shortlong < 0.5:",
                "    morph_x = random.uniform(real_xmin-edge_variance, real_xmin+edge_variance) if leftright < 0.5 else random.uniform(real_xmax-edge_variance, real_xmax+edge_variance)",
                "    morph_y = random.uniform(real_ymin, real_ymax)",
                "  else:",
                "    morph_x = random.uniform(real_xmin, real_xmax)",
                "    morph_y = random.uniform(real_ymin-edge_variance, real_ymin+edge_variance) if leftright < 0.5 else random.uniform(real_ymax-edge_variance, real_ymax+edge_variance)",
                "",
                "  sb.ui.point(morph_x, morph_y, real_zmax, key=str(i), color=sb.color.red if attract < 0.5 else sb.color.green)",
                "",
                "  if attract < 0.5:",
                "    shape = fab.shapes.attract(shape, morph_x, morph_y, z, r)",
                "  else:",
                "    shape = fab.shapes.repel(shape, morph_x, morph_y, z, r)",
                "",
                "# slice and trim the gyroid to fit the requested dimensions",
                "output('texture', slice_xy(shape & fab.shapes.cube(real_xmin, real_xmax, real_ymin, real_ymax, real_zmin, real_zmax), z))",
                "output('morph_count', morph_count)",
                "output('texture_rotation', rotation)",
                "output('texture_thickness', thickness)",
                "",
                ""
            ],
            "uid": 46
        },
        {
            "datums": [
                {
                    "expr": "body.x-body.width/2+self.scale+20+10",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "body.y-body.height/2+self.scale-2.5",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "str(int(texture.serial))",
                    "name": "text",
                    "type": "str",
                    "uid": 2
                },
                {
                    "expr": "7",
                    "name": "scale",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('m-Xf-43-Yf-119.5-Zf0m+f0/-Xf0f7+f0/-Yf0f7_m-Xf0-Yf1-Zf0iiim-Xf0-Yf-1-Zf0aaini-*f0.55-Xf-0.1*f0.5-Yf0.45i-*f-0.55-Xf0.4*f0-Yf1-*f0-Xf0.4*f-0.5-Yf0.45aa-f0.4X-Xf0.5a-f0Y-Yf1nni-*f-0.3-Xf0.4*f0-Yf0.85i-*f0-Xf0.4*f-0.3-Yf0.55-*f0.3-Xf0.1*f0.3-Yf0.55aa-f0X-Xf0.5a-f0Y-Yf1m-Xf0.6-Yf-1-Zf0aaia-r+q-Xf0.3q-Yf0.725f0.275n-r+q-Xf0.3q-Yf0.725f0.175-r+q-Xf0.3q-Yf0.275f0.275n-r+q-Xf0.3q-Yf0.275f0.175naa-f0X-Xf0.275a-f0.275Y-Yf0.725m-Xf1.25-Yf-1-Zf0iiam/Xf1.1Y_mX+f1/-Yf1f2_aaa-r+q-Xf0.275q-Yf0.725f0.275nmX+f0.725/-Yf0.725f1.2_-r+q-Xf0.275q-Yf0.725f0.175aa-f0X-Xf0.55a-f0.725Y-Yf1nni-*f-0.025-Xf0.275*f0.275-Yf0.925i-*f-0.175-Xf0.55*f0-Yf0.9-*f0.2-Xf0.55*f-0.275-Yf0.725naa-f0.275X-Xf0.65a-f0Y-Yf0.7aa-f0X-Xf0.1a-f0.275Y-Yf0.45a-r+q-Xf0.275q-Yf0.275f0.275n-r+q-Xf0.275q-Yf0.275f0.175m-Xf1.9-Yf-1-Zf0aaaa-f0X-Xf0.3a-f0Y-Yf1n-r+qXq-Yf1f0.2naa-f0X-Xf0.2a-f0Y-Yf0.7',float('-43.000000'),float('-119.500000'),float('-inf'),float('-27.599998'),float('-112.500000'),float('inf'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                960.3604742205459,
                -165.49476798970775
            ],
            "name": "serial_id",
            "script": [
                "import fab",
                "",
                "title('Text')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('text', str)",
                "input('scale', float)",
                "",
                "output('shape', fab.shapes.text(text, x, y, scale))",
                "",
                "# UI",
                "sb.ui.wireframe([(x, y, 0), (x, y+scale, 0)])",
                "sb.ui.point(x, y, 0)",
                "sb.ui.point(x, y + scale, 0, drag=(None, scale, None))",
                ""
            ],
            "uid": 4
        },
        {
            "datums": [
                {
                    "expr": "0.0",
                    "name": "_x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "_y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "body.z-body.depth/2",
                    "name": "zmin",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "self.zmin+1",
                    "name": "zmax",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "\u0011[__4.__4]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1m-Xf-43-Yf-119.5-Zf0m+f0/-Xf0f7+f0/-Yf0f7_m-Xf0-Yf1-Zf0iiim-Xf0-Yf-1-Zf0aaini-*f0.55-Xf-0.1*f0.5-Yf0.45i-*f-0.55-Xf0.4*f0-Yf1-*f0-Xf0.4*f-0.5-Yf0.45aa-f0.4X-Xf0.5a-f0Y-Yf1nni-*f-0.3-Xf0.4*f0-Yf0.85i-*f0-Xf0.4*f-0.3-Yf0.55-*f0.3-Xf0.1*f0.3-Yf0.55aa-f0X-Xf0.5a-f0Y-Yf1m-Xf0.6-Yf-1-Zf0aaia-r+q-Xf0.3q-Yf0.725f0.275n-r+q-Xf0.3q-Yf0.725f0.175-r+q-Xf0.3q-Yf0.275f0.275n-r+q-Xf0.3q-Yf0.275f0.175naa-f0X-Xf0.275a-f0.275Y-Yf0.725m-Xf1.25-Yf-1-Zf0iiam/Xf1.1Y_mX+f1/-Yf1f2_aaa-r+q-Xf0.275q-Yf0.725f0.275nmX+f0.725/-Yf0.725f1.2_-r+q-Xf0.275q-Yf0.725f0.175aa-f0X-Xf0.55a-f0.725Y-Yf1nni-*f-0.025-Xf0.275*f0.275-Yf0.925i-*f-0.175-Xf0.55*f0-Yf0.9-*f0.2-Xf0.55*f-0.275-Yf0.725naa-f0.275X-Xf0.65a-f0Y-Yf0.7aa-f0X-Xf0.1a-f0.275Y-Yf0.45a-r+q-Xf0.275q-Yf0.275f0.275n-r+q-Xf0.275q-Yf0.275f0.175m-Xf1.9-Yf-1-Zf0aaaa-f0X-Xf0.3a-f0Y-Yf1n-r+qXq-Yf1f0.2naa-f0X-Xf0.2a-f0Y-Yf0.7a-f-3Z-Zf-2',float('-43.000000'),float('-119.500000'),float('-3.000000'),float('-27.599998'),float('-112.500000'),float('-2.000000'))",
                    "name": "out",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                1303.0946810254106,
                -50.25935433706866
            ],
            "name": "e1",
            "script": [
                "import fab",
                "",
                "title('Extrude')",
                "",
                "input('_x', float)",
                "input('_y', float)",
                "input('zmin', float)",
                "input('zmax', float)",
                "",
                "input('shape', fab.types.Shape)",
                "output('out', fab.shapes.extrude_z(shape, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(_x, _y, zmin), (_x, _y, zmax)], color=sb.color.green)",
                "sb.ui.point(_x, _y, zmin, color=sb.color.green)",
                "sb.ui.point(_x, _y, zmax, color=sb.color.green)",
                "",
                ""
            ],
            "uid": 5
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__4.__0]",
                    "name": "x0",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "_y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "_z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "\u0011[__5.__5]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('m-*f2f-43X__am__f1m-Xf-43-Yf-119.5-Zf0m+f0/-Xf0f7+f0/-Yf0f7_m-Xf0-Yf1-Zf0iiim-Xf0-Yf-1-Zf0aaini-*f0.55-Xf-0.1*f0.5-Yf0.45i-*f-0.55-Xf0.4*f0-Yf1-*f0-Xf0.4*f-0.5-Yf0.45aa-f0.4X-Xf0.5a-f0Y-Yf1nni-*f-0.3-Xf0.4*f0-Yf0.85i-*f0-Xf0.4*f-0.3-Yf0.55-*f0.3-Xf0.1*f0.3-Yf0.55aa-f0X-Xf0.5a-f0Y-Yf1m-Xf0.6-Yf-1-Zf0aaia-r+q-Xf0.3q-Yf0.725f0.275n-r+q-Xf0.3q-Yf0.725f0.175-r+q-Xf0.3q-Yf0.275f0.275n-r+q-Xf0.3q-Yf0.275f0.175naa-f0X-Xf0.275a-f0.275Y-Yf0.725m-Xf1.25-Yf-1-Zf0iiam/Xf1.1Y_mX+f1/-Yf1f2_aaa-r+q-Xf0.275q-Yf0.725f0.275nmX+f0.725/-Yf0.725f1.2_-r+q-Xf0.275q-Yf0.725f0.175aa-f0X-Xf0.55a-f0.725Y-Yf1nni-*f-0.025-Xf0.275*f0.275-Yf0.925i-*f-0.175-Xf0.55*f0-Yf0.9-*f0.2-Xf0.55*f-0.275-Yf0.725naa-f0.275X-Xf0.65a-f0Y-Yf0.7aa-f0X-Xf0.1a-f0.275Y-Yf0.45a-r+q-Xf0.275q-Yf0.275f0.275n-r+q-Xf0.275q-Yf0.275f0.175m-Xf1.9-Yf-1-Zf0aaaa-f0X-Xf0.3a-f0Y-Yf1n-r+qXq-Yf1f0.2naa-f0X-Xf0.2a-f0Y-Yf0.7a-f-3Z-Zf-2',float('-58.400002'),float('-119.500000'),float('-3.000000'),float('-43.000000'),float('-112.500000'),float('-2.000000'))",
                    "name": "reflected",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                1646.6730917321918,
                -165.4403951317789
            ],
            "name": "r0",
            "script": [
                "import fab",
                "",
                "title('Reflect (X)')",
                "",
                "input('x0', float)",
                "input('_y', float)",
                "input('_z', float)",
                "",
                "input('shape', fab.types.Shape)",
                "output('reflected', fab.shapes.reflect_x(shape, x0))",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (x0, _y - 1, _z + 1),",
                "    (x0, _y + 1, _z + 1),",
                "    (x0, _y + 1, _z - 1),",
                "    (x0, _y - 1, _z - 1)], color=sb.color.teal, close=True)",
                "",
                "sb.ui.point(x0, _y, _z, color=sb.color.teal)",
                ""
            ],
            "uid": 6
        }
    ],
    "protocol": 6,
    "type": "sb"
}
